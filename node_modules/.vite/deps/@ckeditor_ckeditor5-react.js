import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __commonJS,
  __esm,
  __export,
  __publicField,
  __toCommonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has2 = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has2;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has2(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has2 = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has2(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has2(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol3(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol3(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/@ckeditor/ckeditor5-watchdog/src/watchdog.js
var Watchdog;
var init_watchdog = __esm({
  "node_modules/@ckeditor/ckeditor5-watchdog/src/watchdog.js"() {
    Watchdog = class {
      /**
       * @param {module:watchdog/watchdog~WatchdogConfig} config The watchdog plugin configuration.
       */
      constructor(config) {
        /**
         * An array of crashes saved as an object with the following properties:
         *
         * * `message`: `String`,
         * * `stack`: `String`,
         * * `date`: `Number`,
         * * `filename`: `String | undefined`,
         * * `lineno`: `Number | undefined`,
         * * `colno`: `Number | undefined`,
         */
        __publicField(this, "crashes", []);
        /**
         * Specifies the state of the item watched by the watchdog. The state can be one of the following values:
         *
         * * `initializing` &ndash; Before the first initialization, and after crashes, before the item is ready.
         * * `ready` &ndash; A state when the user can interact with the item.
         * * `crashed` &ndash; A state when an error occurs. It quickly changes to `initializing` or `crashedPermanently`
         * depending on how many and how frequent errors have been caught recently.
         * * `crashedPermanently` &ndash; A state when the watchdog stops reacting to errors and keeps the item it is watching crashed,
         * * `destroyed` &ndash; A state when the item is manually destroyed by the user after calling `watchdog.destroy()`.
         */
        __publicField(this, "state", "initializing");
        /**
         * @see module:watchdog/watchdog~WatchdogConfig
         */
        __publicField(this, "_crashNumberLimit");
        /**
         * Returns the result of the `Date.now()` call. It can be overridden in tests to mock time as some popular
         * approaches like `sinon.useFakeTimers()` do not work well with error handling.
         */
        __publicField(this, "_now", Date.now);
        /**
         * @see module:watchdog/watchdog~WatchdogConfig
         */
        __publicField(this, "_minimumNonErrorTimePeriod");
        /**
         * Checks if the event error comes from the underlying item and restarts the item.
         */
        __publicField(this, "_boundErrorHandler");
        /**
         * A dictionary of event emitter listeners.
         */
        __publicField(this, "_listeners");
        this.crashes = [];
        this._crashNumberLimit = typeof config.crashNumberLimit === "number" ? config.crashNumberLimit : 3;
        this._minimumNonErrorTimePeriod = typeof config.minimumNonErrorTimePeriod === "number" ? config.minimumNonErrorTimePeriod : 5e3;
        this._boundErrorHandler = (evt) => {
          const error = "error" in evt ? evt.error : evt.reason;
          if (error instanceof Error) {
            this._handleError(error, evt);
          }
        };
        this._listeners = {};
        if (!this._restart) {
          throw new Error("The Watchdog class was split into the abstract `Watchdog` class and the `EditorWatchdog` class. Please, use `EditorWatchdog` if you have used the `Watchdog` class previously.");
        }
      }
      /**
       * Destroys the watchdog and releases the resources.
       */
      destroy() {
        this._stopErrorHandling();
        this._listeners = {};
      }
      /**
       * Starts listening to a specific event name by registering a callback that will be executed
       * whenever an event with a given name fires.
       *
       * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.
       *
       * @param eventName The event name.
       * @param callback A callback which will be added to event listeners.
       */
      on(eventName, callback) {
        if (!this._listeners[eventName]) {
          this._listeners[eventName] = [];
        }
        this._listeners[eventName].push(callback);
      }
      /**
       * Stops listening to the specified event name by removing the callback from event listeners.
       *
       * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.
       *
       * @param eventName The event name.
       * @param callback A callback which will be removed from event listeners.
       */
      off(eventName, callback) {
        this._listeners[eventName] = this._listeners[eventName].filter((cb) => cb !== callback);
      }
      /**
       * Fires an event with a given event name and arguments.
       *
       * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.
       */
      _fire(eventName, ...args) {
        const callbacks = this._listeners[eventName] || [];
        for (const callback of callbacks) {
          callback.apply(this, [null, ...args]);
        }
      }
      /**
       * Starts error handling by attaching global error handlers.
       */
      _startErrorHandling() {
        window.addEventListener("error", this._boundErrorHandler);
        window.addEventListener("unhandledrejection", this._boundErrorHandler);
      }
      /**
       * Stops error handling by detaching global error handlers.
       */
      _stopErrorHandling() {
        window.removeEventListener("error", this._boundErrorHandler);
        window.removeEventListener("unhandledrejection", this._boundErrorHandler);
      }
      /**
       * Checks if an error comes from the watched item and restarts it.
       * It reacts to {@link module:utils/ckeditorerror~CKEditorError `CKEditorError` errors} only.
       *
       * @fires error
       * @param error Error.
       * @param evt An error event.
       */
      _handleError(error, evt) {
        if (this._shouldReactToError(error)) {
          this.crashes.push({
            message: error.message,
            stack: error.stack,
            // `evt.filename`, `evt.lineno` and `evt.colno` are available only in ErrorEvent events
            filename: evt instanceof ErrorEvent ? evt.filename : void 0,
            lineno: evt instanceof ErrorEvent ? evt.lineno : void 0,
            colno: evt instanceof ErrorEvent ? evt.colno : void 0,
            date: this._now()
          });
          const causesRestart = this._shouldRestart();
          this.state = "crashed";
          this._fire("stateChange");
          this._fire("error", { error, causesRestart });
          if (causesRestart) {
            this._restart();
          } else {
            this.state = "crashedPermanently";
            this._fire("stateChange");
          }
        }
      }
      /**
       * Checks whether an error should be handled by the watchdog.
       *
       * @param error An error that was caught by the error handling process.
       */
      _shouldReactToError(error) {
        return error.is && error.is("CKEditorError") && error.context !== void 0 && // In some cases the watched item should not be restarted - e.g. during the item initialization.
        // That's why the `null` was introduced as a correct error context which does cause restarting.
        error.context !== null && // Do not react to errors if the watchdog is in states other than `ready`.
        this.state === "ready" && this._isErrorComingFromThisItem(error);
      }
      /**
       * Checks if the watchdog should restart the underlying item.
       */
      _shouldRestart() {
        if (this.crashes.length <= this._crashNumberLimit) {
          return true;
        }
        const lastErrorTime = this.crashes[this.crashes.length - 1].date;
        const firstMeaningfulErrorTime = this.crashes[this.crashes.length - 1 - this._crashNumberLimit].date;
        const averageNonErrorTimePeriod = (lastErrorTime - firstMeaningfulErrorTime) / this._crashNumberLimit;
        return averageNonErrorTimePeriod > this._minimumNonErrorTimePeriod;
      }
    };
  }
});

// node_modules/es-toolkit/dist/array/at.mjs
var init_at = __esm({
  "node_modules/es-toolkit/dist/array/at.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/countBy.mjs
var init_countBy = __esm({
  "node_modules/es-toolkit/dist/array/countBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/flatten.mjs
var init_flatten = __esm({
  "node_modules/es-toolkit/dist/array/flatten.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/flatMap.mjs
var init_flatMap = __esm({
  "node_modules/es-toolkit/dist/array/flatMap.mjs"() {
    init_flatten();
  }
});

// node_modules/es-toolkit/dist/array/flattenDeep.mjs
var init_flattenDeep = __esm({
  "node_modules/es-toolkit/dist/array/flattenDeep.mjs"() {
    init_flatten();
  }
});

// node_modules/es-toolkit/dist/array/flatMapDeep.mjs
var init_flatMapDeep = __esm({
  "node_modules/es-toolkit/dist/array/flatMapDeep.mjs"() {
    init_flattenDeep();
  }
});

// node_modules/es-toolkit/dist/array/forEachRight.mjs
var init_forEachRight = __esm({
  "node_modules/es-toolkit/dist/array/forEachRight.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/groupBy.mjs
var init_groupBy = __esm({
  "node_modules/es-toolkit/dist/array/groupBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/initial.mjs
var init_initial = __esm({
  "node_modules/es-toolkit/dist/array/initial.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/intersectionWith.mjs
var init_intersectionWith = __esm({
  "node_modules/es-toolkit/dist/array/intersectionWith.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/difference.mjs
var init_difference = __esm({
  "node_modules/es-toolkit/dist/array/difference.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/isSubset.mjs
var init_isSubset = __esm({
  "node_modules/es-toolkit/dist/array/isSubset.mjs"() {
    init_difference();
  }
});

// node_modules/es-toolkit/dist/array/differenceWith.mjs
var init_differenceWith = __esm({
  "node_modules/es-toolkit/dist/array/differenceWith.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/isSubsetWith.mjs
var init_isSubsetWith = __esm({
  "node_modules/es-toolkit/dist/array/isSubsetWith.mjs"() {
    init_differenceWith();
  }
});

// node_modules/es-toolkit/dist/array/keyBy.mjs
var init_keyBy = __esm({
  "node_modules/es-toolkit/dist/array/keyBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/maxBy.mjs
var init_maxBy = __esm({
  "node_modules/es-toolkit/dist/array/maxBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/minBy.mjs
var init_minBy = __esm({
  "node_modules/es-toolkit/dist/array/minBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/partition.mjs
var init_partition = __esm({
  "node_modules/es-toolkit/dist/array/partition.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/pullAt.mjs
var init_pullAt = __esm({
  "node_modules/es-toolkit/dist/array/pullAt.mjs"() {
    init_at();
  }
});

// node_modules/es-toolkit/dist/math/random.mjs
var init_random = __esm({
  "node_modules/es-toolkit/dist/math/random.mjs"() {
  }
});

// node_modules/es-toolkit/dist/math/randomInt.mjs
var init_randomInt = __esm({
  "node_modules/es-toolkit/dist/math/randomInt.mjs"() {
    init_random();
  }
});

// node_modules/es-toolkit/dist/array/sampleSize.mjs
var init_sampleSize = __esm({
  "node_modules/es-toolkit/dist/array/sampleSize.mjs"() {
    init_randomInt();
  }
});

// node_modules/es-toolkit/dist/array/shuffle.mjs
var init_shuffle = __esm({
  "node_modules/es-toolkit/dist/array/shuffle.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/takeWhile.mjs
var init_takeWhile = __esm({
  "node_modules/es-toolkit/dist/array/takeWhile.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/toFilled.mjs
var init_toFilled = __esm({
  "node_modules/es-toolkit/dist/array/toFilled.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/uniqBy.mjs
var init_uniqBy = __esm({
  "node_modules/es-toolkit/dist/array/uniqBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/unionBy.mjs
var init_unionBy = __esm({
  "node_modules/es-toolkit/dist/array/unionBy.mjs"() {
    init_uniqBy();
  }
});

// node_modules/es-toolkit/dist/array/uniqWith.mjs
var init_uniqWith = __esm({
  "node_modules/es-toolkit/dist/array/uniqWith.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/unionWith.mjs
var init_unionWith = __esm({
  "node_modules/es-toolkit/dist/array/unionWith.mjs"() {
    init_uniqWith();
  }
});

// node_modules/es-toolkit/dist/array/unzipWith.mjs
var init_unzipWith = __esm({
  "node_modules/es-toolkit/dist/array/unzipWith.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/windowed.mjs
var init_windowed = __esm({
  "node_modules/es-toolkit/dist/array/windowed.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/intersection.mjs
var init_intersection = __esm({
  "node_modules/es-toolkit/dist/array/intersection.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/uniq.mjs
var init_uniq = __esm({
  "node_modules/es-toolkit/dist/array/uniq.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/union.mjs
var init_union = __esm({
  "node_modules/es-toolkit/dist/array/union.mjs"() {
    init_uniq();
  }
});

// node_modules/es-toolkit/dist/array/xor.mjs
var init_xor = __esm({
  "node_modules/es-toolkit/dist/array/xor.mjs"() {
    init_difference();
    init_intersection();
    init_union();
  }
});

// node_modules/es-toolkit/dist/array/differenceBy.mjs
var init_differenceBy = __esm({
  "node_modules/es-toolkit/dist/array/differenceBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/intersectionBy.mjs
var init_intersectionBy = __esm({
  "node_modules/es-toolkit/dist/array/intersectionBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/xorBy.mjs
var init_xorBy = __esm({
  "node_modules/es-toolkit/dist/array/xorBy.mjs"() {
    init_differenceBy();
    init_intersectionBy();
    init_unionBy();
  }
});

// node_modules/es-toolkit/dist/array/xorWith.mjs
var init_xorWith = __esm({
  "node_modules/es-toolkit/dist/array/xorWith.mjs"() {
    init_differenceWith();
    init_intersectionWith();
    init_unionWith();
  }
});

// node_modules/es-toolkit/dist/array/zipObject.mjs
var init_zipObject = __esm({
  "node_modules/es-toolkit/dist/array/zipObject.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/zipWith.mjs
var init_zipWith = __esm({
  "node_modules/es-toolkit/dist/array/zipWith.mjs"() {
  }
});

// node_modules/es-toolkit/dist/error/AbortError.mjs
var init_AbortError = __esm({
  "node_modules/es-toolkit/dist/error/AbortError.mjs"() {
  }
});

// node_modules/es-toolkit/dist/error/TimeoutError.mjs
var init_TimeoutError = __esm({
  "node_modules/es-toolkit/dist/error/TimeoutError.mjs"() {
  }
});

// node_modules/es-toolkit/dist/function/asyncNoop.mjs
var init_asyncNoop = __esm({
  "node_modules/es-toolkit/dist/function/asyncNoop.mjs"() {
  }
});

// node_modules/es-toolkit/dist/function/identity.mjs
var init_identity = __esm({
  "node_modules/es-toolkit/dist/function/identity.mjs"() {
  }
});

// node_modules/es-toolkit/dist/function/memoize.mjs
var init_memoize = __esm({
  "node_modules/es-toolkit/dist/function/memoize.mjs"() {
  }
});

// node_modules/es-toolkit/dist/function/noop.mjs
var init_noop = __esm({
  "node_modules/es-toolkit/dist/function/noop.mjs"() {
  }
});

// node_modules/es-toolkit/dist/function/once.mjs
var init_once = __esm({
  "node_modules/es-toolkit/dist/function/once.mjs"() {
  }
});

// node_modules/es-toolkit/dist/function/partial.mjs
function partial(func, ...partialArgs) {
  return function(...providedArgs) {
    const args = [];
    let startIndex = 0;
    for (let i = 0; i < partialArgs.length; i++) {
      const arg = partialArgs[i];
      if (arg === partial.placeholder) {
        args.push(providedArgs[startIndex++]);
      } else {
        args.push(arg);
      }
    }
    for (let i = startIndex; i < providedArgs.length; i++) {
      args.push(providedArgs[i]);
    }
    return func.apply(this, args);
  };
}
var partialPlaceholder;
var init_partial = __esm({
  "node_modules/es-toolkit/dist/function/partial.mjs"() {
    partialPlaceholder = Symbol("partial.placeholder");
    partial.placeholder = partialPlaceholder;
  }
});

// node_modules/es-toolkit/dist/function/partialRight.mjs
function partialRight(func, ...partialArgs) {
  return function(...providedArgs) {
    const placeholderLength = partialArgs.filter((arg) => arg === partialRightPlaceholder).length;
    const rangeLength = Math.max(providedArgs.length - placeholderLength, 0);
    const args = [];
    let providedIndex = 0;
    for (let i = 0; i < rangeLength; i++) {
      args.push(providedArgs[providedIndex++]);
    }
    for (let i = 0; i < partialArgs.length; i++) {
      const arg = partialArgs[i];
      if (arg === partialRight.placeholder) {
        args.push(providedArgs[providedIndex++]);
      } else {
        args.push(arg);
      }
    }
    return func.apply(this, args);
  };
}
var partialRightPlaceholder;
var init_partialRight = __esm({
  "node_modules/es-toolkit/dist/function/partialRight.mjs"() {
    partialRightPlaceholder = Symbol("partialRight.placeholder");
    partialRight.placeholder = partialRightPlaceholder;
  }
});

// node_modules/es-toolkit/dist/promise/delay.mjs
var init_delay = __esm({
  "node_modules/es-toolkit/dist/promise/delay.mjs"() {
    init_AbortError();
  }
});

// node_modules/es-toolkit/dist/function/retry.mjs
var DEFAULT_RETRIES;
var init_retry = __esm({
  "node_modules/es-toolkit/dist/function/retry.mjs"() {
    init_delay();
    DEFAULT_RETRIES = Number.POSITIVE_INFINITY;
  }
});

// node_modules/es-toolkit/dist/function/ary.mjs
var init_ary = __esm({
  "node_modules/es-toolkit/dist/function/ary.mjs"() {
  }
});

// node_modules/es-toolkit/dist/function/unary.mjs
var init_unary = __esm({
  "node_modules/es-toolkit/dist/function/unary.mjs"() {
    init_ary();
  }
});

// node_modules/es-toolkit/dist/math/sum.mjs
var init_sum = __esm({
  "node_modules/es-toolkit/dist/math/sum.mjs"() {
  }
});

// node_modules/es-toolkit/dist/math/mean.mjs
var init_mean = __esm({
  "node_modules/es-toolkit/dist/math/mean.mjs"() {
    init_sum();
  }
});

// node_modules/es-toolkit/dist/math/meanBy.mjs
var init_meanBy = __esm({
  "node_modules/es-toolkit/dist/math/meanBy.mjs"() {
    init_mean();
  }
});

// node_modules/es-toolkit/dist/math/median.mjs
var init_median = __esm({
  "node_modules/es-toolkit/dist/math/median.mjs"() {
  }
});

// node_modules/es-toolkit/dist/math/medianBy.mjs
var init_medianBy = __esm({
  "node_modules/es-toolkit/dist/math/medianBy.mjs"() {
    init_median();
  }
});

// node_modules/es-toolkit/dist/predicate/isPrimitive.mjs
function isPrimitive(value) {
  return value == null || typeof value !== "object" && typeof value !== "function";
}
var init_isPrimitive = __esm({
  "node_modules/es-toolkit/dist/predicate/isPrimitive.mjs"() {
  }
});

// node_modules/es-toolkit/dist/predicate/isTypedArray.mjs
function isTypedArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}
var init_isTypedArray = __esm({
  "node_modules/es-toolkit/dist/predicate/isTypedArray.mjs"() {
  }
});

// node_modules/es-toolkit/dist/object/clone.mjs
var init_clone = __esm({
  "node_modules/es-toolkit/dist/object/clone.mjs"() {
    init_isPrimitive();
    init_isTypedArray();
  }
});

// node_modules/es-toolkit/dist/predicate/isPlainObject.mjs
var init_isPlainObject = __esm({
  "node_modules/es-toolkit/dist/predicate/isPlainObject.mjs"() {
  }
});

// node_modules/es-toolkit/dist/object/flattenObject.mjs
var init_flattenObject = __esm({
  "node_modules/es-toolkit/dist/object/flattenObject.mjs"() {
    init_isPlainObject();
  }
});

// node_modules/es-toolkit/dist/object/invert.mjs
var init_invert = __esm({
  "node_modules/es-toolkit/dist/object/invert.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isObjectLike.mjs
function isObjectLike(value) {
  return typeof value === "object" && value !== null;
}
var init_isObjectLike = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isObjectLike.mjs"() {
  }
});

// node_modules/es-toolkit/dist/object/omitBy.mjs
var init_omitBy = __esm({
  "node_modules/es-toolkit/dist/object/omitBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/object/pickBy.mjs
var init_pickBy = __esm({
  "node_modules/es-toolkit/dist/object/pickBy.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/_internal/getSymbols.mjs
function getSymbols(object) {
  return Object.getOwnPropertySymbols(object).filter((symbol) => Object.prototype.propertyIsEnumerable.call(object, symbol));
}
var init_getSymbols = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/getSymbols.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/_internal/getTag.mjs
function getTag(value) {
  if (value == null) {
    return value === void 0 ? "[object Undefined]" : "[object Null]";
  }
  return Object.prototype.toString.call(value);
}
var init_getTag = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/getTag.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/_internal/tags.mjs
var regexpTag, stringTag, numberTag, booleanTag, argumentsTag, symbolTag, dateTag, mapTag, setTag, arrayTag, arrayBufferTag, objectTag, dataViewTag, uint8ArrayTag, uint8ClampedArrayTag, uint16ArrayTag, uint32ArrayTag, int8ArrayTag, int16ArrayTag, int32ArrayTag, float32ArrayTag, float64ArrayTag;
var init_tags = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/tags.mjs"() {
    regexpTag = "[object RegExp]";
    stringTag = "[object String]";
    numberTag = "[object Number]";
    booleanTag = "[object Boolean]";
    argumentsTag = "[object Arguments]";
    symbolTag = "[object Symbol]";
    dateTag = "[object Date]";
    mapTag = "[object Map]";
    setTag = "[object Set]";
    arrayTag = "[object Array]";
    arrayBufferTag = "[object ArrayBuffer]";
    objectTag = "[object Object]";
    dataViewTag = "[object DataView]";
    uint8ArrayTag = "[object Uint8Array]";
    uint8ClampedArrayTag = "[object Uint8ClampedArray]";
    uint16ArrayTag = "[object Uint16Array]";
    uint32ArrayTag = "[object Uint32Array]";
    int8ArrayTag = "[object Int8Array]";
    int16ArrayTag = "[object Int16Array]";
    int32ArrayTag = "[object Int32Array]";
    float32ArrayTag = "[object Float32Array]";
    float64ArrayTag = "[object Float64Array]";
  }
});

// node_modules/es-toolkit/dist/object/cloneDeepWith.mjs
function cloneDeepWith(obj, cloneValue) {
  return cloneDeepWithImpl(obj, void 0, obj, /* @__PURE__ */ new Map(), cloneValue);
}
function cloneDeepWithImpl(valueToClone, keyToClone, objectToClone, stack = /* @__PURE__ */ new Map(), cloneValue = void 0) {
  const cloned = cloneValue == null ? void 0 : cloneValue(valueToClone, keyToClone, objectToClone, stack);
  if (cloned != null) {
    return cloned;
  }
  if (isPrimitive(valueToClone)) {
    return valueToClone;
  }
  if (stack.has(valueToClone)) {
    return stack.get(valueToClone);
  }
  if (Array.isArray(valueToClone)) {
    const result = new Array(valueToClone.length);
    stack.set(valueToClone, result);
    for (let i = 0; i < valueToClone.length; i++) {
      result[i] = cloneDeepWithImpl(valueToClone[i], i, objectToClone, stack, cloneValue);
    }
    if (Object.hasOwn(valueToClone, "index")) {
      result.index = valueToClone.index;
    }
    if (Object.hasOwn(valueToClone, "input")) {
      result.input = valueToClone.input;
    }
    return result;
  }
  if (valueToClone instanceof Date) {
    return new Date(valueToClone.getTime());
  }
  if (valueToClone instanceof RegExp) {
    const result = new RegExp(valueToClone.source, valueToClone.flags);
    result.lastIndex = valueToClone.lastIndex;
    return result;
  }
  if (valueToClone instanceof Map) {
    const result = /* @__PURE__ */ new Map();
    stack.set(valueToClone, result);
    for (const [key, value] of valueToClone) {
      result.set(key, cloneDeepWithImpl(value, key, objectToClone, stack, cloneValue));
    }
    return result;
  }
  if (valueToClone instanceof Set) {
    const result = /* @__PURE__ */ new Set();
    stack.set(valueToClone, result);
    for (const value of valueToClone) {
      result.add(cloneDeepWithImpl(value, void 0, objectToClone, stack, cloneValue));
    }
    return result;
  }
  if (typeof Buffer !== "undefined" && Buffer.isBuffer(valueToClone)) {
    return valueToClone.subarray();
  }
  if (isTypedArray(valueToClone)) {
    const result = new (Object.getPrototypeOf(valueToClone)).constructor(valueToClone.length);
    stack.set(valueToClone, result);
    for (let i = 0; i < valueToClone.length; i++) {
      result[i] = cloneDeepWithImpl(valueToClone[i], i, objectToClone, stack, cloneValue);
    }
    return result;
  }
  if (valueToClone instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && valueToClone instanceof SharedArrayBuffer) {
    return valueToClone.slice(0);
  }
  if (valueToClone instanceof DataView) {
    const result = new DataView(valueToClone.buffer.slice(0), valueToClone.byteOffset, valueToClone.byteLength);
    stack.set(valueToClone, result);
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  if (typeof File !== "undefined" && valueToClone instanceof File) {
    const result = new File([valueToClone], valueToClone.name, {
      type: valueToClone.type
    });
    stack.set(valueToClone, result);
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  if (valueToClone instanceof Blob) {
    const result = new Blob([valueToClone], { type: valueToClone.type });
    stack.set(valueToClone, result);
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  if (valueToClone instanceof Error) {
    const result = new valueToClone.constructor();
    stack.set(valueToClone, result);
    result.message = valueToClone.message;
    result.name = valueToClone.name;
    result.stack = valueToClone.stack;
    result.cause = valueToClone.cause;
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  if (typeof valueToClone === "object" && isCloneableObject(valueToClone)) {
    const result = Object.create(Object.getPrototypeOf(valueToClone));
    stack.set(valueToClone, result);
    copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
    return result;
  }
  return valueToClone;
}
function copyProperties(target, source, objectToClone = target, stack, cloneValue) {
  const keys2 = [...Object.keys(source), ...getSymbols(source)];
  for (let i = 0; i < keys2.length; i++) {
    const key = keys2[i];
    const descriptor = Object.getOwnPropertyDescriptor(target, key);
    if (descriptor == null || descriptor.writable) {
      target[key] = cloneDeepWithImpl(source[key], key, objectToClone, stack, cloneValue);
    }
  }
}
function isCloneableObject(object) {
  switch (getTag(object)) {
    case argumentsTag:
    case arrayTag:
    case arrayBufferTag:
    case dataViewTag:
    case booleanTag:
    case dateTag:
    case float32ArrayTag:
    case float64ArrayTag:
    case int8ArrayTag:
    case int16ArrayTag:
    case int32ArrayTag:
    case mapTag:
    case numberTag:
    case objectTag:
    case regexpTag:
    case setTag:
    case stringTag:
    case symbolTag:
    case uint8ArrayTag:
    case uint8ClampedArrayTag:
    case uint16ArrayTag:
    case uint32ArrayTag: {
      return true;
    }
    default: {
      return false;
    }
  }
}
var init_cloneDeepWith = __esm({
  "node_modules/es-toolkit/dist/object/cloneDeepWith.mjs"() {
    init_getSymbols();
    init_getTag();
    init_tags();
    init_isPrimitive();
    init_isTypedArray();
  }
});

// node_modules/es-toolkit/dist/object/cloneDeep.mjs
var init_cloneDeep = __esm({
  "node_modules/es-toolkit/dist/object/cloneDeep.mjs"() {
    init_cloneDeepWith();
  }
});

// node_modules/es-toolkit/dist/object/merge.mjs
var init_merge = __esm({
  "node_modules/es-toolkit/dist/object/merge.mjs"() {
    init_isPlainObject();
  }
});

// node_modules/es-toolkit/dist/object/toMerged.mjs
var init_toMerged = __esm({
  "node_modules/es-toolkit/dist/object/toMerged.mjs"() {
    init_cloneDeep();
    init_merge();
  }
});

// node_modules/es-toolkit/dist/predicate/isBlob.mjs
var init_isBlob = __esm({
  "node_modules/es-toolkit/dist/predicate/isBlob.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/eq.mjs
var init_eq = __esm({
  "node_modules/es-toolkit/dist/compat/util/eq.mjs"() {
  }
});

// node_modules/es-toolkit/dist/predicate/isEqualWith.mjs
var init_isEqualWith = __esm({
  "node_modules/es-toolkit/dist/predicate/isEqualWith.mjs"() {
    init_isPlainObject();
    init_getSymbols();
    init_getTag();
    init_tags();
    init_eq();
  }
});

// node_modules/es-toolkit/dist/predicate/isEqual.mjs
var init_isEqual = __esm({
  "node_modules/es-toolkit/dist/predicate/isEqual.mjs"() {
    init_isEqualWith();
    init_noop();
  }
});

// node_modules/es-toolkit/dist/predicate/isFile.mjs
var init_isFile = __esm({
  "node_modules/es-toolkit/dist/predicate/isFile.mjs"() {
    init_isBlob();
  }
});

// node_modules/es-toolkit/dist/predicate/isFunction.mjs
var init_isFunction = __esm({
  "node_modules/es-toolkit/dist/predicate/isFunction.mjs"() {
  }
});

// node_modules/es-toolkit/dist/predicate/isJSONValue.mjs
var init_isJSONValue = __esm({
  "node_modules/es-toolkit/dist/predicate/isJSONValue.mjs"() {
    init_isPlainObject();
  }
});

// node_modules/es-toolkit/dist/predicate/isLength.mjs
var init_isLength = __esm({
  "node_modules/es-toolkit/dist/predicate/isLength.mjs"() {
  }
});

// node_modules/es-toolkit/dist/predicate/isNotNil.mjs
var init_isNotNil = __esm({
  "node_modules/es-toolkit/dist/predicate/isNotNil.mjs"() {
  }
});

// node_modules/es-toolkit/dist/predicate/isNull.mjs
var init_isNull = __esm({
  "node_modules/es-toolkit/dist/predicate/isNull.mjs"() {
  }
});

// node_modules/es-toolkit/dist/predicate/isPromise.mjs
var init_isPromise = __esm({
  "node_modules/es-toolkit/dist/predicate/isPromise.mjs"() {
  }
});

// node_modules/es-toolkit/dist/predicate/isUndefined.mjs
var init_isUndefined = __esm({
  "node_modules/es-toolkit/dist/predicate/isUndefined.mjs"() {
  }
});

// node_modules/es-toolkit/dist/promise/semaphore.mjs
var init_semaphore = __esm({
  "node_modules/es-toolkit/dist/promise/semaphore.mjs"() {
  }
});

// node_modules/es-toolkit/dist/promise/mutex.mjs
var init_mutex = __esm({
  "node_modules/es-toolkit/dist/promise/mutex.mjs"() {
    init_semaphore();
  }
});

// node_modules/es-toolkit/dist/promise/timeout.mjs
var init_timeout = __esm({
  "node_modules/es-toolkit/dist/promise/timeout.mjs"() {
    init_delay();
    init_TimeoutError();
  }
});

// node_modules/es-toolkit/dist/promise/withTimeout.mjs
var init_withTimeout = __esm({
  "node_modules/es-toolkit/dist/promise/withTimeout.mjs"() {
    init_timeout();
  }
});

// node_modules/es-toolkit/dist/string/capitalize.mjs
var init_capitalize = __esm({
  "node_modules/es-toolkit/dist/string/capitalize.mjs"() {
  }
});

// node_modules/es-toolkit/dist/string/words.mjs
var CASE_SPLIT_PATTERN;
var init_words = __esm({
  "node_modules/es-toolkit/dist/string/words.mjs"() {
    CASE_SPLIT_PATTERN = new RegExp("\\p{Lu}?\\p{Ll}+|[0-9]+|\\p{Lu}+(?!\\p{Ll})|\\p{Emoji_Presentation}|\\p{Extended_Pictographic}|\\p{L}+", "gu");
  }
});

// node_modules/es-toolkit/dist/string/constantCase.mjs
var init_constantCase = __esm({
  "node_modules/es-toolkit/dist/string/constantCase.mjs"() {
    init_words();
  }
});

// node_modules/es-toolkit/dist/string/deburr.mjs
var deburrMap;
var init_deburr = __esm({
  "node_modules/es-toolkit/dist/string/deburr.mjs"() {
    deburrMap = new Map(Object.entries({
      Æ: "Ae",
      Ð: "D",
      Ø: "O",
      Þ: "Th",
      ß: "ss",
      æ: "ae",
      ð: "d",
      ø: "o",
      þ: "th",
      Đ: "D",
      đ: "d",
      Ħ: "H",
      ħ: "h",
      ı: "i",
      Ĳ: "IJ",
      ĳ: "ij",
      ĸ: "k",
      Ŀ: "L",
      ŀ: "l",
      Ł: "L",
      ł: "l",
      ŉ: "'n",
      Ŋ: "N",
      ŋ: "n",
      Œ: "Oe",
      œ: "oe",
      Ŧ: "T",
      ŧ: "t",
      ſ: "s"
    }));
  }
});

// node_modules/es-toolkit/dist/string/pascalCase.mjs
var init_pascalCase = __esm({
  "node_modules/es-toolkit/dist/string/pascalCase.mjs"() {
    init_capitalize();
    init_words();
  }
});

// node_modules/es-toolkit/dist/util/invariant.mjs
var init_invariant = __esm({
  "node_modules/es-toolkit/dist/util/invariant.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/castArray.mjs
var init_castArray = __esm({
  "node_modules/es-toolkit/dist/compat/array/castArray.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/chunk.mjs
var init_chunk = __esm({
  "node_modules/es-toolkit/dist/array/chunk.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/_internal/toArray.mjs
var init_toArray = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/toArray.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isArrayLike.mjs
var init_isArrayLike = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isArrayLike.mjs"() {
    init_isLength();
  }
});

// node_modules/es-toolkit/dist/compat/array/chunk.mjs
var init_chunk2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/chunk.mjs"() {
    init_chunk();
    init_toArray();
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/array/compact.mjs
var init_compact = __esm({
  "node_modules/es-toolkit/dist/array/compact.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/compact.mjs
var init_compact2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/compact.mjs"() {
    init_compact();
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/array/concat.mjs
var init_concat = __esm({
  "node_modules/es-toolkit/dist/compat/array/concat.mjs"() {
    init_flatten();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isArrayLikeObject.mjs
var init_isArrayLikeObject = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isArrayLikeObject.mjs"() {
    init_isArrayLike();
    init_isObjectLike();
  }
});

// node_modules/es-toolkit/dist/compat/array/difference.mjs
var init_difference2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/difference.mjs"() {
    init_difference();
    init_toArray();
    init_isArrayLikeObject();
  }
});

// node_modules/es-toolkit/dist/array/last.mjs
var init_last = __esm({
  "node_modules/es-toolkit/dist/array/last.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/last.mjs
var init_last2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/last.mjs"() {
    init_last();
    init_toArray();
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/_internal/flattenArrayLike.mjs
var init_flattenArrayLike = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/flattenArrayLike.mjs"() {
    init_isArrayLikeObject();
  }
});

// node_modules/es-toolkit/dist/compat/_internal/isDeepKey.mjs
var init_isDeepKey = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/isDeepKey.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/_internal/toKey.mjs
var init_toKey = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/toKey.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/toPath.mjs
var init_toPath = __esm({
  "node_modules/es-toolkit/dist/compat/util/toPath.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/object/get.mjs
var init_get = __esm({
  "node_modules/es-toolkit/dist/compat/object/get.mjs"() {
    init_isDeepKey();
    init_toKey();
    init_toPath();
  }
});

// node_modules/es-toolkit/dist/compat/object/property.mjs
var init_property = __esm({
  "node_modules/es-toolkit/dist/compat/object/property.mjs"() {
    init_get();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isObject.mjs
var init_isObject = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isObject.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isMatch.mjs
var init_isMatch = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isMatch.mjs"() {
    init_isObject();
    init_isPrimitive();
    init_eq();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/matches.mjs
var init_matches = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/matches.mjs"() {
    init_isMatch();
    init_cloneDeep();
  }
});

// node_modules/es-toolkit/dist/compat/object/cloneDeepWith.mjs
function cloneDeepWith2(obj, cloneValue) {
  return cloneDeepWith(obj, (value, key, object, stack) => {
    const cloned = cloneValue == null ? void 0 : cloneValue(value, key, object, stack);
    if (cloned != null) {
      return cloned;
    }
    if (typeof obj !== "object") {
      return void 0;
    }
    switch (Object.prototype.toString.call(obj)) {
      case numberTag:
      case stringTag:
      case booleanTag: {
        const result = new obj.constructor(obj == null ? void 0 : obj.valueOf());
        copyProperties(result, obj);
        return result;
      }
      case argumentsTag: {
        const result = {};
        copyProperties(result, obj);
        result.length = obj.length;
        result[Symbol.iterator] = obj[Symbol.iterator];
        return result;
      }
      default: {
        return void 0;
      }
    }
  });
}
var init_cloneDeepWith2 = __esm({
  "node_modules/es-toolkit/dist/compat/object/cloneDeepWith.mjs"() {
    init_cloneDeepWith();
    init_tags();
  }
});

// node_modules/es-toolkit/dist/compat/object/cloneDeep.mjs
var init_cloneDeep2 = __esm({
  "node_modules/es-toolkit/dist/compat/object/cloneDeep.mjs"() {
    init_cloneDeepWith2();
  }
});

// node_modules/es-toolkit/dist/compat/_internal/isIndex.mjs
var init_isIndex = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/isIndex.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isArguments.mjs
var init_isArguments = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isArguments.mjs"() {
    init_getTag();
  }
});

// node_modules/es-toolkit/dist/compat/object/has.mjs
var init_has = __esm({
  "node_modules/es-toolkit/dist/compat/object/has.mjs"() {
    init_isDeepKey();
    init_isIndex();
    init_isArguments();
    init_toPath();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/matchesProperty.mjs
var init_matchesProperty = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/matchesProperty.mjs"() {
    init_isMatch();
    init_toKey();
    init_cloneDeep2();
    init_get();
    init_has();
  }
});

// node_modules/es-toolkit/dist/compat/util/iteratee.mjs
var init_iteratee = __esm({
  "node_modules/es-toolkit/dist/compat/util/iteratee.mjs"() {
    init_identity();
    init_property();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/compat/array/differenceBy.mjs
var init_differenceBy2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/differenceBy.mjs"() {
    init_last2();
    init_difference();
    init_differenceBy();
    init_flattenArrayLike();
    init_isArrayLikeObject();
    init_iteratee();
  }
});

// node_modules/es-toolkit/dist/compat/array/differenceWith.mjs
var init_differenceWith2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/differenceWith.mjs"() {
    init_last2();
    init_difference();
    init_differenceWith();
    init_flattenArrayLike();
    init_isArrayLikeObject();
  }
});

// node_modules/es-toolkit/dist/array/drop.mjs
var init_drop = __esm({
  "node_modules/es-toolkit/dist/array/drop.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isSymbol.mjs
var init_isSymbol = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isSymbol.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/toNumber.mjs
var init_toNumber = __esm({
  "node_modules/es-toolkit/dist/compat/util/toNumber.mjs"() {
    init_isSymbol();
  }
});

// node_modules/es-toolkit/dist/compat/util/toFinite.mjs
var init_toFinite = __esm({
  "node_modules/es-toolkit/dist/compat/util/toFinite.mjs"() {
    init_toNumber();
  }
});

// node_modules/es-toolkit/dist/compat/util/toInteger.mjs
var init_toInteger = __esm({
  "node_modules/es-toolkit/dist/compat/util/toInteger.mjs"() {
    init_toFinite();
  }
});

// node_modules/es-toolkit/dist/compat/array/drop.mjs
var init_drop2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/drop.mjs"() {
    init_drop();
    init_toArray();
    init_isArrayLike();
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/array/dropRight.mjs
var init_dropRight = __esm({
  "node_modules/es-toolkit/dist/array/dropRight.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/dropRight.mjs
var init_dropRight2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/dropRight.mjs"() {
    init_dropRight();
    init_toArray();
    init_isArrayLike();
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/array/dropRightWhile.mjs
var init_dropRightWhile = __esm({
  "node_modules/es-toolkit/dist/array/dropRightWhile.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/dropRightWhile.mjs
var init_dropRightWhile2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/dropRightWhile.mjs"() {
    init_dropRightWhile();
    init_property();
    init_isArrayLike();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/array/dropWhile.mjs
var init_dropWhile = __esm({
  "node_modules/es-toolkit/dist/array/dropWhile.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/dropWhile.mjs
var init_dropWhile2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/dropWhile.mjs"() {
    init_dropWhile();
    init_toArray();
    init_property();
    init_isArrayLike();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/compat/_internal/isIterateeCall.mjs
var init_isIterateeCall = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/isIterateeCall.mjs"() {
    init_isIndex();
    init_isArrayLike();
    init_isObject();
    init_eq();
  }
});

// node_modules/es-toolkit/dist/compat/array/every.mjs
var init_every = __esm({
  "node_modules/es-toolkit/dist/compat/array/every.mjs"() {
    init_identity();
    init_isIterateeCall();
    init_property();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/array/fill.mjs
var init_fill = __esm({
  "node_modules/es-toolkit/dist/array/fill.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isString.mjs
var init_isString = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isString.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/fill.mjs
var init_fill2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/fill.mjs"() {
    init_fill();
    init_isArrayLike();
    init_isString();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isArray.mjs
var init_isArray = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isArray.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/filter.mjs
var init_filter = __esm({
  "node_modules/es-toolkit/dist/compat/array/filter.mjs"() {
    init_identity();
    init_property();
    init_isArray();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/compat/array/find.mjs
var init_find = __esm({
  "node_modules/es-toolkit/dist/compat/array/find.mjs"() {
    init_property();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/compat/array/findIndex.mjs
var init_findIndex = __esm({
  "node_modules/es-toolkit/dist/compat/array/findIndex.mjs"() {
    init_property();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/compat/array/findLastIndex.mjs
var init_findLastIndex = __esm({
  "node_modules/es-toolkit/dist/compat/array/findLastIndex.mjs"() {
    init_toArray();
    init_property();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/compat/array/flatten.mjs
var init_flatten2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/flatten.mjs"() {
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/array/flattenDeep.mjs
var init_flattenDeep2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/flattenDeep.mjs"() {
    init_flatten2();
  }
});

// node_modules/es-toolkit/dist/compat/array/flattenDepth.mjs
var init_flattenDepth = __esm({
  "node_modules/es-toolkit/dist/compat/array/flattenDepth.mjs"() {
    init_flatten2();
  }
});

// node_modules/es-toolkit/dist/math/range.mjs
var init_range = __esm({
  "node_modules/es-toolkit/dist/math/range.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/forEach.mjs
var init_forEach = __esm({
  "node_modules/es-toolkit/dist/compat/array/forEach.mjs"() {
    init_identity();
    init_range();
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/array/head.mjs
var init_head = __esm({
  "node_modules/es-toolkit/dist/array/head.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/head.mjs
var init_head2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/head.mjs"() {
    init_head();
    init_toArray();
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/array/includes.mjs
var init_includes = __esm({
  "node_modules/es-toolkit/dist/compat/array/includes.mjs"() {
    init_isString();
    init_eq();
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/compat/array/indexOf.mjs
var init_indexOf = __esm({
  "node_modules/es-toolkit/dist/compat/array/indexOf.mjs"() {
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/array/intersection.mjs
var init_intersection2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/intersection.mjs"() {
    init_intersection();
    init_uniq();
    init_isArrayLikeObject();
  }
});

// node_modules/es-toolkit/dist/compat/array/intersectionBy.mjs
var init_intersectionBy2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/intersectionBy.mjs"() {
    init_intersectionBy();
    init_last();
    init_uniq();
    init_identity();
    init_property();
    init_isArrayLikeObject();
  }
});

// node_modules/es-toolkit/dist/compat/array/join.mjs
var init_join = __esm({
  "node_modules/es-toolkit/dist/compat/array/join.mjs"() {
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/array/lastIndexOf.mjs
var init_lastIndexOf = __esm({
  "node_modules/es-toolkit/dist/compat/array/lastIndexOf.mjs"() {
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/array/map.mjs
var init_map = __esm({
  "node_modules/es-toolkit/dist/compat/array/map.mjs"() {
    init_identity();
    init_range();
    init_isArrayLike();
    init_iteratee();
  }
});

// node_modules/es-toolkit/dist/compat/array/nth.mjs
var init_nth = __esm({
  "node_modules/es-toolkit/dist/compat/array/nth.mjs"() {
    init_isArrayLikeObject();
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/compat/_internal/compareValues.mjs
var init_compareValues = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/compareValues.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/_internal/isKey.mjs
var init_isKey = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/isKey.mjs"() {
    init_isSymbol();
  }
});

// node_modules/es-toolkit/dist/compat/array/orderBy.mjs
var init_orderBy = __esm({
  "node_modules/es-toolkit/dist/compat/array/orderBy.mjs"() {
    init_compareValues();
    init_isKey();
    init_toPath();
  }
});

// node_modules/es-toolkit/dist/array/pull.mjs
var init_pull = __esm({
  "node_modules/es-toolkit/dist/array/pull.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/pull.mjs
var init_pull2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/pull.mjs"() {
    init_pull();
  }
});

// node_modules/es-toolkit/dist/compat/array/pullAll.mjs
var init_pullAll = __esm({
  "node_modules/es-toolkit/dist/compat/array/pullAll.mjs"() {
    init_pull();
  }
});

// node_modules/es-toolkit/dist/array/remove.mjs
var init_remove = __esm({
  "node_modules/es-toolkit/dist/array/remove.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/remove.mjs
var init_remove2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/remove.mjs"() {
    init_remove();
    init_iteratee();
  }
});

// node_modules/es-toolkit/dist/compat/array/reverse.mjs
var init_reverse = __esm({
  "node_modules/es-toolkit/dist/compat/array/reverse.mjs"() {
  }
});

// node_modules/es-toolkit/dist/array/sample.mjs
var init_sample = __esm({
  "node_modules/es-toolkit/dist/array/sample.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/sample.mjs
var init_sample2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/sample.mjs"() {
    init_sample();
    init_toArray();
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/predicate/isNil.mjs
var init_isNil = __esm({
  "node_modules/es-toolkit/dist/predicate/isNil.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/size.mjs
var init_size = __esm({
  "node_modules/es-toolkit/dist/compat/array/size.mjs"() {
    init_isNil();
  }
});

// node_modules/es-toolkit/dist/compat/array/slice.mjs
var init_slice = __esm({
  "node_modules/es-toolkit/dist/compat/array/slice.mjs"() {
    init_isIterateeCall();
    init_isArrayLike();
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/compat/array/some.mjs
var init_some = __esm({
  "node_modules/es-toolkit/dist/compat/array/some.mjs"() {
    init_identity();
    init_property();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/compat/array/sortBy.mjs
var init_sortBy = __esm({
  "node_modules/es-toolkit/dist/compat/array/sortBy.mjs"() {
    init_orderBy();
    init_flatten();
    init_isIterateeCall();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isNaN.mjs
var init_isNaN = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isNaN.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isNil.mjs
var init_isNil2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isNil.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/sortedIndexBy.mjs
var MAX_ARRAY_LENGTH, MAX_ARRAY_INDEX;
var init_sortedIndexBy = __esm({
  "node_modules/es-toolkit/dist/compat/array/sortedIndexBy.mjs"() {
    init_isNull();
    init_isUndefined();
    init_isNaN();
    init_isNil2();
    init_isSymbol();
    MAX_ARRAY_LENGTH = 4294967295;
    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;
  }
});

// node_modules/es-toolkit/dist/predicate/isSymbol.mjs
var init_isSymbol2 = __esm({
  "node_modules/es-toolkit/dist/predicate/isSymbol.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isNumber.mjs
var init_isNumber = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isNumber.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/sortedIndex.mjs
var MAX_ARRAY_LENGTH2, HALF_MAX_ARRAY_LENGTH;
var init_sortedIndex = __esm({
  "node_modules/es-toolkit/dist/compat/array/sortedIndex.mjs"() {
    init_sortedIndexBy();
    init_isNil();
    init_isNull();
    init_isSymbol2();
    init_isNumber();
    MAX_ARRAY_LENGTH2 = 4294967295;
    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH2 >>> 1;
  }
});

// node_modules/es-toolkit/dist/array/tail.mjs
var init_tail = __esm({
  "node_modules/es-toolkit/dist/array/tail.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/tail.mjs
var init_tail2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/tail.mjs"() {
    init_tail();
    init_toArray();
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/array/take.mjs
var init_take = __esm({
  "node_modules/es-toolkit/dist/array/take.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/take.mjs
var init_take2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/take.mjs"() {
    init_take();
    init_toArray();
    init_isArrayLike();
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/array/takeRight.mjs
var init_takeRight = __esm({
  "node_modules/es-toolkit/dist/array/takeRight.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/takeRight.mjs
var init_takeRight2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/takeRight.mjs"() {
    init_takeRight();
    init_toArray();
    init_isArrayLike();
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/function/negate.mjs
var init_negate = __esm({
  "node_modules/es-toolkit/dist/function/negate.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/takeRightWhile.mjs
var init_takeRightWhile = __esm({
  "node_modules/es-toolkit/dist/compat/array/takeRightWhile.mjs"() {
    init_negate();
    init_toArray();
    init_isArrayLikeObject();
    init_iteratee();
  }
});

// node_modules/es-toolkit/dist/compat/array/union.mjs
var init_union2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/union.mjs"() {
    init_flatten2();
    init_uniq();
    init_isArrayLikeObject();
  }
});

// node_modules/es-toolkit/dist/compat/array/uniq.mjs
var init_uniq2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/uniq.mjs"() {
    init_uniq();
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/array/uniqBy.mjs
var init_uniqBy2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/uniqBy.mjs"() {
    init_uniqBy();
    init_isArrayLikeObject();
    init_iteratee();
  }
});

// node_modules/es-toolkit/dist/array/unzip.mjs
var init_unzip = __esm({
  "node_modules/es-toolkit/dist/array/unzip.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/unzip.mjs
var init_unzip2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/unzip.mjs"() {
    init_unzip();
    init_isArrayLikeObject();
  }
});

// node_modules/es-toolkit/dist/array/without.mjs
var init_without = __esm({
  "node_modules/es-toolkit/dist/array/without.mjs"() {
    init_difference();
  }
});

// node_modules/es-toolkit/dist/compat/array/without.mjs
var init_without2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/without.mjs"() {
    init_without();
    init_isArrayLikeObject();
  }
});

// node_modules/es-toolkit/dist/array/zip.mjs
var init_zip = __esm({
  "node_modules/es-toolkit/dist/array/zip.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/array/zip.mjs
var init_zip2 = __esm({
  "node_modules/es-toolkit/dist/compat/array/zip.mjs"() {
    init_zip();
    init_isArrayLikeObject();
  }
});

// node_modules/es-toolkit/dist/compat/object/set.mjs
var init_set = __esm({
  "node_modules/es-toolkit/dist/compat/object/set.mjs"() {
    init_isIndex();
    init_toPath();
  }
});

// node_modules/es-toolkit/dist/compat/array/zipObjectDeep.mjs
var init_zipObjectDeep = __esm({
  "node_modules/es-toolkit/dist/compat/array/zipObjectDeep.mjs"() {
    init_zip();
    init_set();
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/function/after.mjs
var init_after = __esm({
  "node_modules/es-toolkit/dist/compat/function/after.mjs"() {
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/compat/function/ary.mjs
var init_ary2 = __esm({
  "node_modules/es-toolkit/dist/compat/function/ary.mjs"() {
    init_ary();
  }
});

// node_modules/es-toolkit/dist/compat/function/attempt.mjs
var init_attempt = __esm({
  "node_modules/es-toolkit/dist/compat/function/attempt.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/function/before.mjs
var init_before = __esm({
  "node_modules/es-toolkit/dist/compat/function/before.mjs"() {
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/compat/function/bind.mjs
function bind(func, thisObj, ...partialArgs) {
  const bound = function(...providedArgs) {
    const args = [];
    let startIndex = 0;
    for (let i = 0; i < partialArgs.length; i++) {
      const arg = partialArgs[i];
      if (arg === bind.placeholder) {
        args.push(providedArgs[startIndex++]);
      } else {
        args.push(arg);
      }
    }
    for (let i = startIndex; i < providedArgs.length; i++) {
      args.push(providedArgs[i]);
    }
    if (this instanceof bound) {
      return new func(...args);
    }
    return func.apply(thisObj, args);
  };
  return bound;
}
var bindPlaceholder;
var init_bind = __esm({
  "node_modules/es-toolkit/dist/compat/function/bind.mjs"() {
    bindPlaceholder = Symbol("bind.placeholder");
    bind.placeholder = bindPlaceholder;
  }
});

// node_modules/es-toolkit/dist/compat/function/bindKey.mjs
function bindKey(object, key, ...partialArgs) {
  const bound = function(...providedArgs) {
    const args = [];
    let startIndex = 0;
    for (let i = 0; i < partialArgs.length; i++) {
      const arg = partialArgs[i];
      if (arg === bindKey.placeholder) {
        args.push(providedArgs[startIndex++]);
      } else {
        args.push(arg);
      }
    }
    for (let i = startIndex; i < providedArgs.length; i++) {
      args.push(providedArgs[i]);
    }
    if (this instanceof bound) {
      return new object[key](...args);
    }
    return object[key].apply(object, args);
  };
  return bound;
}
var bindKeyPlaceholder;
var init_bindKey = __esm({
  "node_modules/es-toolkit/dist/compat/function/bindKey.mjs"() {
    bindKeyPlaceholder = Symbol("bindKey.placeholder");
    bindKey.placeholder = bindKeyPlaceholder;
  }
});

// node_modules/es-toolkit/dist/compat/function/curry.mjs
function curry(func, arity = func.length, guard) {
  arity = guard ? func.length : arity;
  arity = Number.parseInt(arity, 10);
  if (Number.isNaN(arity) || arity < 1) {
    arity = 0;
  }
  const wrapper = function(...partialArgs) {
    const holders = partialArgs.filter((item) => item === curry.placeholder);
    const length = partialArgs.length - holders.length;
    if (length < arity) {
      return makeCurry(func, arity - length, partialArgs);
    }
    if (this instanceof wrapper) {
      return new func(...partialArgs);
    }
    return func.apply(this, partialArgs);
  };
  wrapper.placeholder = curryPlaceholder;
  return wrapper;
}
function makeCurry(func, arity, partialArgs) {
  function wrapper(...providedArgs) {
    const holders = providedArgs.filter((item) => item === curry.placeholder);
    const length = providedArgs.length - holders.length;
    providedArgs = composeArgs(providedArgs, partialArgs);
    if (length < arity) {
      return makeCurry(func, arity - length, providedArgs);
    }
    if (this instanceof wrapper) {
      return new func(...providedArgs);
    }
    return func.apply(this, providedArgs);
  }
  wrapper.placeholder = curryPlaceholder;
  return wrapper;
}
function composeArgs(providedArgs, partialArgs) {
  const args = [];
  let startIndex = 0;
  for (let i = 0; i < partialArgs.length; i++) {
    const arg = partialArgs[i];
    if (arg === curry.placeholder && startIndex < providedArgs.length) {
      args.push(providedArgs[startIndex++]);
    } else {
      args.push(arg);
    }
  }
  for (let i = startIndex; i < providedArgs.length; i++) {
    args.push(providedArgs[i]);
  }
  return args;
}
var curryPlaceholder;
var init_curry = __esm({
  "node_modules/es-toolkit/dist/compat/function/curry.mjs"() {
    curryPlaceholder = Symbol("curry.placeholder");
    curry.placeholder = curryPlaceholder;
  }
});

// node_modules/es-toolkit/dist/compat/function/curryRight.mjs
function curryRight(func, arity = func.length, guard) {
  arity = guard ? func.length : arity;
  arity = Number.parseInt(arity, 10);
  if (Number.isNaN(arity) || arity < 1) {
    arity = 0;
  }
  const wrapper = function(...partialArgs) {
    const holders = partialArgs.filter((item) => item === curryRight.placeholder);
    const length = partialArgs.length - holders.length;
    if (length < arity) {
      return makeCurryRight(func, arity - length, partialArgs);
    }
    if (this instanceof wrapper) {
      return new func(...partialArgs);
    }
    return func.apply(this, partialArgs);
  };
  wrapper.placeholder = curryRightPlaceholder;
  return wrapper;
}
function makeCurryRight(func, arity, partialArgs) {
  function wrapper(...providedArgs) {
    const holders = providedArgs.filter((item) => item === curryRight.placeholder);
    const length = providedArgs.length - holders.length;
    providedArgs = composeArgs2(providedArgs, partialArgs);
    if (length < arity) {
      return makeCurryRight(func, arity - length, providedArgs);
    }
    if (this instanceof wrapper) {
      return new func(...providedArgs);
    }
    return func.apply(this, providedArgs);
  }
  wrapper.placeholder = curryRightPlaceholder;
  return wrapper;
}
function composeArgs2(providedArgs, partialArgs) {
  const placeholderLength = partialArgs.filter((arg) => arg === curryRight.placeholder).length;
  const rangeLength = Math.max(providedArgs.length - placeholderLength, 0);
  const args = [];
  let providedIndex = 0;
  for (let i = 0; i < rangeLength; i++) {
    args.push(providedArgs[providedIndex++]);
  }
  for (let i = 0; i < partialArgs.length; i++) {
    const arg = partialArgs[i];
    if (arg === curryRight.placeholder) {
      if (providedIndex < providedArgs.length) {
        args.push(providedArgs[providedIndex++]);
      } else {
        args.push(arg);
      }
    } else {
      args.push(arg);
    }
  }
  return args;
}
var curryRightPlaceholder;
var init_curryRight = __esm({
  "node_modules/es-toolkit/dist/compat/function/curryRight.mjs"() {
    curryRightPlaceholder = Symbol("curryRight.placeholder");
    curryRight.placeholder = curryRightPlaceholder;
  }
});

// node_modules/es-toolkit/dist/function/debounce.mjs
function debounce(func, debounceMs, { signal, edges } = {}) {
  let pendingThis = void 0;
  let pendingArgs = null;
  const leading = edges != null && edges.includes("leading");
  const trailing = edges == null || edges.includes("trailing");
  const invoke2 = () => {
    if (pendingArgs !== null) {
      func.apply(pendingThis, pendingArgs);
      pendingThis = void 0;
      pendingArgs = null;
    }
  };
  const onTimerEnd = () => {
    if (trailing) {
      invoke2();
    }
    cancel();
  };
  let timeoutId = null;
  const schedule = () => {
    if (timeoutId != null) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(() => {
      timeoutId = null;
      onTimerEnd();
    }, debounceMs);
  };
  const cancelTimer = () => {
    if (timeoutId !== null) {
      clearTimeout(timeoutId);
      timeoutId = null;
    }
  };
  const cancel = () => {
    cancelTimer();
    pendingThis = void 0;
    pendingArgs = null;
  };
  const flush = () => {
    cancelTimer();
    invoke2();
  };
  const debounced = function(...args) {
    if (signal == null ? void 0 : signal.aborted) {
      return;
    }
    pendingThis = this;
    pendingArgs = args;
    const isFirstCall = timeoutId == null;
    schedule();
    if (leading && isFirstCall) {
      invoke2();
    }
  };
  debounced.schedule = schedule;
  debounced.cancel = cancel;
  debounced.flush = flush;
  signal == null ? void 0 : signal.addEventListener("abort", cancel, { once: true });
  return debounced;
}
var init_debounce = __esm({
  "node_modules/es-toolkit/dist/function/debounce.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/function/debounce.mjs
function debounce2(func, debounceMs = 0, options = {}) {
  if (typeof options !== "object") {
    options = {};
  }
  const { signal, leading = false, trailing = true, maxWait } = options;
  const edges = Array(2);
  if (leading) {
    edges[0] = "leading";
  }
  if (trailing) {
    edges[1] = "trailing";
  }
  let result = void 0;
  let pendingAt = null;
  const _debounced = debounce(function(...args) {
    result = func.apply(this, args);
    pendingAt = null;
  }, debounceMs, { signal, edges });
  const debounced = function(...args) {
    if (maxWait != null) {
      if (pendingAt === null) {
        pendingAt = Date.now();
      } else {
        if (Date.now() - pendingAt >= maxWait) {
          result = func.apply(this, args);
          pendingAt = Date.now();
          _debounced.cancel();
          _debounced.schedule();
          return result;
        }
      }
    }
    _debounced.apply(this, args);
    return result;
  };
  const flush = () => {
    _debounced.flush();
    return result;
  };
  debounced.cancel = _debounced.cancel;
  debounced.flush = flush;
  return debounced;
}
var init_debounce2 = __esm({
  "node_modules/es-toolkit/dist/compat/function/debounce.mjs"() {
    init_debounce();
  }
});

// node_modules/es-toolkit/dist/compat/function/defer.mjs
var init_defer = __esm({
  "node_modules/es-toolkit/dist/compat/function/defer.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/function/delay.mjs
var init_delay2 = __esm({
  "node_modules/es-toolkit/dist/compat/function/delay.mjs"() {
    init_toNumber();
  }
});

// node_modules/es-toolkit/dist/compat/function/flip.mjs
var init_flip = __esm({
  "node_modules/es-toolkit/dist/compat/function/flip.mjs"() {
  }
});

// node_modules/es-toolkit/dist/function/flow.mjs
var init_flow = __esm({
  "node_modules/es-toolkit/dist/function/flow.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/function/flow.mjs
var init_flow2 = __esm({
  "node_modules/es-toolkit/dist/compat/function/flow.mjs"() {
    init_flatten();
    init_flow();
  }
});

// node_modules/es-toolkit/dist/function/flowRight.mjs
var init_flowRight = __esm({
  "node_modules/es-toolkit/dist/function/flowRight.mjs"() {
    init_flow();
  }
});

// node_modules/es-toolkit/dist/compat/function/flowRight.mjs
var init_flowRight2 = __esm({
  "node_modules/es-toolkit/dist/compat/function/flowRight.mjs"() {
    init_flatten();
    init_flowRight();
  }
});

// node_modules/es-toolkit/dist/compat/function/negate.mjs
var init_negate2 = __esm({
  "node_modules/es-toolkit/dist/compat/function/negate.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/function/nthArg.mjs
var init_nthArg = __esm({
  "node_modules/es-toolkit/dist/compat/function/nthArg.mjs"() {
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/compat/function/rearg.mjs
var init_rearg = __esm({
  "node_modules/es-toolkit/dist/compat/function/rearg.mjs"() {
    init_flatten2();
  }
});

// node_modules/es-toolkit/dist/function/rest.mjs
var init_rest = __esm({
  "node_modules/es-toolkit/dist/function/rest.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/function/rest.mjs
var init_rest2 = __esm({
  "node_modules/es-toolkit/dist/compat/function/rest.mjs"() {
    init_rest();
  }
});

// node_modules/es-toolkit/dist/compat/function/spread.mjs
var init_spread = __esm({
  "node_modules/es-toolkit/dist/compat/function/spread.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/function/throttle.mjs
function throttle(func, throttleMs = 0, options = {}) {
  if (typeof options !== "object") {
    options = {};
  }
  const { leading = true, trailing = true, signal } = options;
  return debounce2(func, throttleMs, {
    leading,
    trailing,
    signal,
    maxWait: throttleMs
  });
}
var init_throttle = __esm({
  "node_modules/es-toolkit/dist/compat/function/throttle.mjs"() {
    init_debounce2();
  }
});

// node_modules/es-toolkit/dist/compat/math/add.mjs
var init_add = __esm({
  "node_modules/es-toolkit/dist/compat/math/add.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/_internal/decimalAdjust.mjs
var init_decimalAdjust = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/decimalAdjust.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/math/ceil.mjs
var init_ceil = __esm({
  "node_modules/es-toolkit/dist/compat/math/ceil.mjs"() {
    init_decimalAdjust();
  }
});

// node_modules/es-toolkit/dist/math/clamp.mjs
var init_clamp = __esm({
  "node_modules/es-toolkit/dist/math/clamp.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/math/clamp.mjs
var init_clamp2 = __esm({
  "node_modules/es-toolkit/dist/compat/math/clamp.mjs"() {
    init_clamp();
  }
});

// node_modules/es-toolkit/dist/compat/math/floor.mjs
var init_floor = __esm({
  "node_modules/es-toolkit/dist/compat/math/floor.mjs"() {
    init_decimalAdjust();
  }
});

// node_modules/es-toolkit/dist/math/inRange.mjs
var init_inRange = __esm({
  "node_modules/es-toolkit/dist/math/inRange.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/math/inRange.mjs
var init_inRange2 = __esm({
  "node_modules/es-toolkit/dist/compat/math/inRange.mjs"() {
    init_inRange();
  }
});

// node_modules/es-toolkit/dist/compat/math/max.mjs
var init_max = __esm({
  "node_modules/es-toolkit/dist/compat/math/max.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/math/min.mjs
var init_min = __esm({
  "node_modules/es-toolkit/dist/compat/math/min.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/toString.mjs
var init_toString = __esm({
  "node_modules/es-toolkit/dist/compat/util/toString.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/math/multiply.mjs
var init_multiply = __esm({
  "node_modules/es-toolkit/dist/compat/math/multiply.mjs"() {
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/math/parseInt.mjs
var init_parseInt = __esm({
  "node_modules/es-toolkit/dist/compat/math/parseInt.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/math/random.mjs
var init_random2 = __esm({
  "node_modules/es-toolkit/dist/compat/math/random.mjs"() {
    init_clamp2();
    init_random();
    init_randomInt();
  }
});

// node_modules/es-toolkit/dist/compat/math/range.mjs
var init_range2 = __esm({
  "node_modules/es-toolkit/dist/compat/math/range.mjs"() {
    init_isIterateeCall();
    init_toFinite();
  }
});

// node_modules/es-toolkit/dist/compat/math/rangeRight.mjs
var init_rangeRight = __esm({
  "node_modules/es-toolkit/dist/compat/math/rangeRight.mjs"() {
    init_isIterateeCall();
    init_toFinite();
  }
});

// node_modules/es-toolkit/dist/compat/math/round.mjs
var init_round = __esm({
  "node_modules/es-toolkit/dist/compat/math/round.mjs"() {
    init_decimalAdjust();
  }
});

// node_modules/es-toolkit/dist/compat/math/subtract.mjs
var init_subtract = __esm({
  "node_modules/es-toolkit/dist/compat/math/subtract.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/math/sumBy.mjs
var init_sumBy = __esm({
  "node_modules/es-toolkit/dist/compat/math/sumBy.mjs"() {
    init_iteratee();
  }
});

// node_modules/es-toolkit/dist/compat/math/sum.mjs
var init_sum2 = __esm({
  "node_modules/es-toolkit/dist/compat/math/sum.mjs"() {
    init_sumBy();
  }
});

// node_modules/es-toolkit/dist/predicate/isBuffer.mjs
var init_isBuffer = __esm({
  "node_modules/es-toolkit/dist/predicate/isBuffer.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/_internal/isPrototype.mjs
var init_isPrototype = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/isPrototype.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isTypedArray.mjs
var init_isTypedArray2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isTypedArray.mjs"() {
    init_isTypedArray();
  }
});

// node_modules/es-toolkit/dist/compat/util/times.mjs
var init_times = __esm({
  "node_modules/es-toolkit/dist/compat/util/times.mjs"() {
    init_toInteger();
  }
});

// node_modules/es-toolkit/dist/compat/object/keysIn.mjs
var init_keysIn = __esm({
  "node_modules/es-toolkit/dist/compat/object/keysIn.mjs"() {
    init_isBuffer();
    init_isPrototype();
    init_isArrayLike();
    init_isTypedArray2();
    init_times();
  }
});

// node_modules/es-toolkit/dist/compat/object/assignIn.mjs
var init_assignIn = __esm({
  "node_modules/es-toolkit/dist/compat/object/assignIn.mjs"() {
    init_keysIn();
    init_eq();
  }
});

// node_modules/es-toolkit/dist/compat/object/defaults.mjs
var init_defaults = __esm({
  "node_modules/es-toolkit/dist/compat/object/defaults.mjs"() {
    init_eq();
  }
});

// node_modules/es-toolkit/dist/object/findKey.mjs
var init_findKey = __esm({
  "node_modules/es-toolkit/dist/object/findKey.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/object/findKey.mjs
var init_findKey2 = __esm({
  "node_modules/es-toolkit/dist/compat/object/findKey.mjs"() {
    init_property();
    init_findKey();
    init_isObject();
    init_matches();
    init_matchesProperty();
  }
});

// node_modules/es-toolkit/dist/compat/object/fromPairs.mjs
var init_fromPairs = __esm({
  "node_modules/es-toolkit/dist/compat/object/fromPairs.mjs"() {
    init_isArrayLike();
  }
});

// node_modules/es-toolkit/dist/compat/object/invertBy.mjs
var init_invertBy = __esm({
  "node_modules/es-toolkit/dist/compat/object/invertBy.mjs"() {
    init_identity();
    init_isNil();
  }
});

// node_modules/es-toolkit/dist/compat/object/keys.mjs
var init_keys = __esm({
  "node_modules/es-toolkit/dist/compat/object/keys.mjs"() {
    init_isBuffer();
    init_isPrototype();
    init_isArrayLike();
    init_isTypedArray2();
    init_times();
  }
});

// node_modules/es-toolkit/dist/object/mapKeys.mjs
var init_mapKeys = __esm({
  "node_modules/es-toolkit/dist/object/mapKeys.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/object/mapKeys.mjs
var init_mapKeys2 = __esm({
  "node_modules/es-toolkit/dist/compat/object/mapKeys.mjs"() {
    init_property();
    init_identity();
    init_mapKeys();
  }
});

// node_modules/es-toolkit/dist/object/mapValues.mjs
var init_mapValues = __esm({
  "node_modules/es-toolkit/dist/object/mapValues.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/object/mapValues.mjs
var init_mapValues2 = __esm({
  "node_modules/es-toolkit/dist/compat/object/mapValues.mjs"() {
    init_property();
    init_identity();
    init_mapValues();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isPlainObject.mjs
function isPlainObject2(object) {
  var _a;
  if (typeof object !== "object") {
    return false;
  }
  if (object == null) {
    return false;
  }
  if (Object.getPrototypeOf(object) === null) {
    return true;
  }
  if (Object.prototype.toString.call(object) !== "[object Object]") {
    const tag = object[Symbol.toStringTag];
    if (tag == null) {
      return false;
    }
    const isTagReadonly = !((_a = Object.getOwnPropertyDescriptor(object, Symbol.toStringTag)) == null ? void 0 : _a.writable);
    if (isTagReadonly) {
      return false;
    }
    return object.toString() === `[object ${tag}]`;
  }
  let proto = object;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(object) === proto;
}
var init_isPlainObject2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isPlainObject.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/object/mergeWith.mjs
var init_mergeWith = __esm({
  "node_modules/es-toolkit/dist/compat/object/mergeWith.mjs"() {
    init_cloneDeep2();
    init_clone();
    init_isPrimitive();
    init_getSymbols();
    init_isArguments();
    init_isObjectLike();
    init_isPlainObject2();
    init_isTypedArray2();
  }
});

// node_modules/es-toolkit/dist/compat/object/merge.mjs
var init_merge2 = __esm({
  "node_modules/es-toolkit/dist/compat/object/merge.mjs"() {
    init_mergeWith();
    init_noop();
  }
});

// node_modules/es-toolkit/dist/compat/object/unset.mjs
var init_unset = __esm({
  "node_modules/es-toolkit/dist/compat/object/unset.mjs"() {
    init_get();
    init_isDeepKey();
    init_toKey();
    init_toPath();
  }
});

// node_modules/es-toolkit/dist/compat/object/omit.mjs
var init_omit = __esm({
  "node_modules/es-toolkit/dist/compat/object/omit.mjs"() {
    init_unset();
    init_cloneDeep();
  }
});

// node_modules/es-toolkit/dist/compat/object/pick.mjs
var init_pick = __esm({
  "node_modules/es-toolkit/dist/compat/object/pick.mjs"() {
    init_get();
    init_has();
    init_set();
    init_isNil2();
  }
});

// node_modules/es-toolkit/dist/compat/object/propertyOf.mjs
var init_propertyOf = __esm({
  "node_modules/es-toolkit/dist/compat/object/propertyOf.mjs"() {
    init_get();
  }
});

// node_modules/es-toolkit/dist/compat/object/toDefaulted.mjs
var init_toDefaulted = __esm({
  "node_modules/es-toolkit/dist/compat/object/toDefaulted.mjs"() {
    init_cloneDeep2();
    init_defaults();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/conformsTo.mjs
var init_conformsTo = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/conformsTo.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/conforms.mjs
var init_conforms = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/conforms.mjs"() {
    init_conformsTo();
    init_cloneDeep();
  }
});

// node_modules/es-toolkit/dist/predicate/isArrayBuffer.mjs
var init_isArrayBuffer = __esm({
  "node_modules/es-toolkit/dist/predicate/isArrayBuffer.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isArrayBuffer.mjs
var init_isArrayBuffer2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isArrayBuffer.mjs"() {
    init_isArrayBuffer();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isBoolean.mjs
var init_isBoolean = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isBoolean.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isBuffer.mjs
var init_isBuffer2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isBuffer.mjs"() {
    init_isBuffer();
  }
});

// node_modules/es-toolkit/dist/predicate/isDate.mjs
var init_isDate = __esm({
  "node_modules/es-toolkit/dist/predicate/isDate.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isDate.mjs
var init_isDate2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isDate.mjs"() {
    init_isDate();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isElement.mjs
function isElement(value) {
  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
}
var init_isElement = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isElement.mjs"() {
    init_isObjectLike();
    init_isPlainObject2();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isEmpty.mjs
var init_isEmpty = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isEmpty.mjs"() {
    init_isArguments();
    init_isArrayLike();
    init_isTypedArray2();
    init_isPrototype();
  }
});

// node_modules/es-toolkit/dist/function/after.mjs
var init_after2 = __esm({
  "node_modules/es-toolkit/dist/function/after.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isEqualWith.mjs
var init_isEqualWith2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isEqualWith.mjs"() {
    init_after2();
    init_noop();
    init_isEqualWith();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isError.mjs
var init_isError = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isError.mjs"() {
    init_getTag();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isFinite.mjs
var init_isFinite = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isFinite.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isInteger.mjs
var init_isInteger = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isInteger.mjs"() {
  }
});

// node_modules/es-toolkit/dist/predicate/isMap.mjs
var init_isMap = __esm({
  "node_modules/es-toolkit/dist/predicate/isMap.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isMap.mjs
var init_isMap2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isMap.mjs"() {
    init_isMap();
  }
});

// node_modules/es-toolkit/dist/predicate/isRegExp.mjs
var init_isRegExp = __esm({
  "node_modules/es-toolkit/dist/predicate/isRegExp.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isRegExp.mjs
var init_isRegExp2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isRegExp.mjs"() {
    init_isRegExp();
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isSafeInteger.mjs
var init_isSafeInteger = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isSafeInteger.mjs"() {
  }
});

// node_modules/es-toolkit/dist/predicate/isSet.mjs
var init_isSet = __esm({
  "node_modules/es-toolkit/dist/predicate/isSet.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isSet.mjs
var init_isSet2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isSet.mjs"() {
    init_isSet();
  }
});

// node_modules/es-toolkit/dist/predicate/isWeakMap.mjs
var init_isWeakMap = __esm({
  "node_modules/es-toolkit/dist/predicate/isWeakMap.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isWeakMap.mjs
var init_isWeakMap2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isWeakMap.mjs"() {
    init_isWeakMap();
  }
});

// node_modules/es-toolkit/dist/predicate/isWeakSet.mjs
var init_isWeakSet = __esm({
  "node_modules/es-toolkit/dist/predicate/isWeakSet.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/predicate/isWeakSet.mjs
var init_isWeakSet2 = __esm({
  "node_modules/es-toolkit/dist/compat/predicate/isWeakSet.mjs"() {
    init_isWeakSet();
  }
});

// node_modules/es-toolkit/dist/string/camelCase.mjs
var init_camelCase = __esm({
  "node_modules/es-toolkit/dist/string/camelCase.mjs"() {
    init_capitalize();
    init_words();
  }
});

// node_modules/es-toolkit/dist/compat/_internal/normalizeForCase.mjs
var init_normalizeForCase = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/normalizeForCase.mjs"() {
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/string/camelCase.mjs
var init_camelCase2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/camelCase.mjs"() {
    init_camelCase();
    init_normalizeForCase();
  }
});

// node_modules/es-toolkit/dist/compat/string/deburr.mjs
var init_deburr2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/deburr.mjs"() {
    init_deburr();
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/string/endsWith.mjs
var init_endsWith = __esm({
  "node_modules/es-toolkit/dist/compat/string/endsWith.mjs"() {
  }
});

// node_modules/es-toolkit/dist/string/escape.mjs
var init_escape = __esm({
  "node_modules/es-toolkit/dist/string/escape.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/string/escape.mjs
var init_escape2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/escape.mjs"() {
    init_escape();
    init_toString();
  }
});

// node_modules/es-toolkit/dist/string/escapeRegExp.mjs
var init_escapeRegExp = __esm({
  "node_modules/es-toolkit/dist/string/escapeRegExp.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/string/escapeRegExp.mjs
var init_escapeRegExp2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/escapeRegExp.mjs"() {
    init_escapeRegExp();
    init_toString();
  }
});

// node_modules/es-toolkit/dist/string/kebabCase.mjs
var init_kebabCase = __esm({
  "node_modules/es-toolkit/dist/string/kebabCase.mjs"() {
    init_words();
  }
});

// node_modules/es-toolkit/dist/compat/string/kebabCase.mjs
var init_kebabCase2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/kebabCase.mjs"() {
    init_kebabCase();
    init_normalizeForCase();
  }
});

// node_modules/es-toolkit/dist/string/lowerCase.mjs
var init_lowerCase = __esm({
  "node_modules/es-toolkit/dist/string/lowerCase.mjs"() {
    init_words();
  }
});

// node_modules/es-toolkit/dist/compat/string/lowerCase.mjs
var init_lowerCase2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/lowerCase.mjs"() {
    init_lowerCase();
    init_normalizeForCase();
  }
});

// node_modules/es-toolkit/dist/string/lowerFirst.mjs
var init_lowerFirst = __esm({
  "node_modules/es-toolkit/dist/string/lowerFirst.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/string/lowerFirst.mjs
var init_lowerFirst2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/lowerFirst.mjs"() {
    init_lowerFirst();
    init_toString();
  }
});

// node_modules/es-toolkit/dist/string/pad.mjs
var init_pad = __esm({
  "node_modules/es-toolkit/dist/string/pad.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/string/pad.mjs
var init_pad2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/pad.mjs"() {
    init_pad();
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/string/padEnd.mjs
var init_padEnd = __esm({
  "node_modules/es-toolkit/dist/compat/string/padEnd.mjs"() {
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/string/padStart.mjs
var init_padStart = __esm({
  "node_modules/es-toolkit/dist/compat/string/padStart.mjs"() {
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/string/repeat.mjs
var init_repeat = __esm({
  "node_modules/es-toolkit/dist/compat/string/repeat.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/string/replace.mjs
var init_replace = __esm({
  "node_modules/es-toolkit/dist/compat/string/replace.mjs"() {
    init_toString();
  }
});

// node_modules/es-toolkit/dist/string/snakeCase.mjs
var init_snakeCase = __esm({
  "node_modules/es-toolkit/dist/string/snakeCase.mjs"() {
    init_words();
  }
});

// node_modules/es-toolkit/dist/compat/string/snakeCase.mjs
var init_snakeCase2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/snakeCase.mjs"() {
    init_snakeCase();
    init_normalizeForCase();
  }
});

// node_modules/es-toolkit/dist/compat/string/startCase.mjs
var init_startCase = __esm({
  "node_modules/es-toolkit/dist/compat/string/startCase.mjs"() {
    init_words();
    init_normalizeForCase();
  }
});

// node_modules/es-toolkit/dist/compat/string/startsWith.mjs
var init_startsWith = __esm({
  "node_modules/es-toolkit/dist/compat/string/startsWith.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/string/template.mjs
var init_template = __esm({
  "node_modules/es-toolkit/dist/compat/string/template.mjs"() {
    init_escape2();
    init_attempt();
    init_defaults();
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/string/toLower.mjs
var init_toLower = __esm({
  "node_modules/es-toolkit/dist/compat/string/toLower.mjs"() {
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/string/toUpper.mjs
var init_toUpper = __esm({
  "node_modules/es-toolkit/dist/compat/string/toUpper.mjs"() {
    init_toString();
  }
});

// node_modules/es-toolkit/dist/string/trimEnd.mjs
var init_trimEnd = __esm({
  "node_modules/es-toolkit/dist/string/trimEnd.mjs"() {
  }
});

// node_modules/es-toolkit/dist/string/trimStart.mjs
var init_trimStart = __esm({
  "node_modules/es-toolkit/dist/string/trimStart.mjs"() {
  }
});

// node_modules/es-toolkit/dist/string/trim.mjs
var init_trim = __esm({
  "node_modules/es-toolkit/dist/string/trim.mjs"() {
    init_trimEnd();
    init_trimStart();
  }
});

// node_modules/es-toolkit/dist/compat/string/trim.mjs
var init_trim2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/trim.mjs"() {
    init_trim();
  }
});

// node_modules/es-toolkit/dist/compat/string/trimEnd.mjs
var init_trimEnd2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/trimEnd.mjs"() {
    init_trimEnd();
  }
});

// node_modules/es-toolkit/dist/compat/string/trimStart.mjs
var init_trimStart2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/trimStart.mjs"() {
    init_trimStart();
  }
});

// node_modules/es-toolkit/dist/string/unescape.mjs
var init_unescape = __esm({
  "node_modules/es-toolkit/dist/string/unescape.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/string/unescape.mjs
var init_unescape2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/unescape.mjs"() {
    init_unescape();
    init_toString();
  }
});

// node_modules/es-toolkit/dist/string/upperCase.mjs
var init_upperCase = __esm({
  "node_modules/es-toolkit/dist/string/upperCase.mjs"() {
    init_words();
  }
});

// node_modules/es-toolkit/dist/compat/string/upperCase.mjs
var init_upperCase2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/upperCase.mjs"() {
    init_upperCase();
    init_normalizeForCase();
  }
});

// node_modules/es-toolkit/dist/string/upperFirst.mjs
var init_upperFirst = __esm({
  "node_modules/es-toolkit/dist/string/upperFirst.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/string/upperFirst.mjs
var init_upperFirst2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/upperFirst.mjs"() {
    init_upperFirst();
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/string/words.mjs
var init_words2 = __esm({
  "node_modules/es-toolkit/dist/compat/string/words.mjs"() {
    init_words();
    init_toString();
  }
});

// node_modules/es-toolkit/dist/compat/util/constant.mjs
var init_constant = __esm({
  "node_modules/es-toolkit/dist/compat/util/constant.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/defaultTo.mjs
var init_defaultTo = __esm({
  "node_modules/es-toolkit/dist/compat/util/defaultTo.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/gt.mjs
var init_gt = __esm({
  "node_modules/es-toolkit/dist/compat/util/gt.mjs"() {
    init_toNumber();
  }
});

// node_modules/es-toolkit/dist/compat/util/gte.mjs
var init_gte = __esm({
  "node_modules/es-toolkit/dist/compat/util/gte.mjs"() {
    init_toNumber();
  }
});

// node_modules/es-toolkit/dist/compat/util/invoke.mjs
var init_invoke = __esm({
  "node_modules/es-toolkit/dist/compat/util/invoke.mjs"() {
    init_toPath();
    init_toKey();
    init_last2();
    init_get();
  }
});

// node_modules/es-toolkit/dist/compat/util/lt.mjs
var init_lt = __esm({
  "node_modules/es-toolkit/dist/compat/util/lt.mjs"() {
    init_toNumber();
  }
});

// node_modules/es-toolkit/dist/compat/util/lte.mjs
var init_lte = __esm({
  "node_modules/es-toolkit/dist/compat/util/lte.mjs"() {
    init_toNumber();
  }
});

// node_modules/es-toolkit/dist/compat/util/method.mjs
var init_method = __esm({
  "node_modules/es-toolkit/dist/compat/util/method.mjs"() {
    init_invoke();
  }
});

// node_modules/es-toolkit/dist/compat/util/methodOf.mjs
var init_methodOf = __esm({
  "node_modules/es-toolkit/dist/compat/util/methodOf.mjs"() {
    init_invoke();
  }
});

// node_modules/es-toolkit/dist/compat/util/now.mjs
var init_now = __esm({
  "node_modules/es-toolkit/dist/compat/util/now.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/stubArray.mjs
var init_stubArray = __esm({
  "node_modules/es-toolkit/dist/compat/util/stubArray.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/stubFalse.mjs
var init_stubFalse = __esm({
  "node_modules/es-toolkit/dist/compat/util/stubFalse.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/stubObject.mjs
var init_stubObject = __esm({
  "node_modules/es-toolkit/dist/compat/util/stubObject.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/stubString.mjs
var init_stubString = __esm({
  "node_modules/es-toolkit/dist/compat/util/stubString.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/stubTrue.mjs
var init_stubTrue = __esm({
  "node_modules/es-toolkit/dist/compat/util/stubTrue.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/toArray.mjs
var init_toArray2 = __esm({
  "node_modules/es-toolkit/dist/compat/util/toArray.mjs"() {
    init_isArrayLike();
    init_isMap2();
  }
});

// node_modules/es-toolkit/dist/compat/_internal/MAX_ARRAY_LENGTH.mjs
var init_MAX_ARRAY_LENGTH = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/MAX_ARRAY_LENGTH.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/util/toLength.mjs
var init_toLength = __esm({
  "node_modules/es-toolkit/dist/compat/util/toLength.mjs"() {
    init_MAX_ARRAY_LENGTH();
    init_clamp2();
  }
});

// node_modules/es-toolkit/dist/compat/util/toPlainObject.mjs
var init_toPlainObject = __esm({
  "node_modules/es-toolkit/dist/compat/util/toPlainObject.mjs"() {
    init_keysIn();
  }
});

// node_modules/es-toolkit/dist/compat/_internal/MAX_SAFE_INTEGER.mjs
var MAX_SAFE_INTEGER;
var init_MAX_SAFE_INTEGER = __esm({
  "node_modules/es-toolkit/dist/compat/_internal/MAX_SAFE_INTEGER.mjs"() {
    MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;
  }
});

// node_modules/es-toolkit/dist/compat/util/toSafeInteger.mjs
var init_toSafeInteger = __esm({
  "node_modules/es-toolkit/dist/compat/util/toSafeInteger.mjs"() {
    init_toInteger();
    init_MAX_SAFE_INTEGER();
    init_clamp2();
  }
});

// node_modules/es-toolkit/dist/compat/util/uniqueId.mjs
var init_uniqueId = __esm({
  "node_modules/es-toolkit/dist/compat/util/uniqueId.mjs"() {
  }
});

// node_modules/es-toolkit/dist/compat/index.mjs
var init_compat = __esm({
  "node_modules/es-toolkit/dist/compat/index.mjs"() {
    init_at();
    init_countBy();
    init_flatMap();
    init_flatMapDeep();
    init_forEachRight();
    init_groupBy();
    init_initial();
    init_intersectionWith();
    init_isSubset();
    init_isSubsetWith();
    init_keyBy();
    init_maxBy();
    init_minBy();
    init_partition();
    init_pullAt();
    init_sampleSize();
    init_shuffle();
    init_takeWhile();
    init_toFilled();
    init_unionBy();
    init_unionWith();
    init_uniqWith();
    init_unzipWith();
    init_windowed();
    init_xor();
    init_xorBy();
    init_xorWith();
    init_zipObject();
    init_zipWith();
    init_AbortError();
    init_TimeoutError();
    init_asyncNoop();
    init_identity();
    init_memoize();
    init_noop();
    init_once();
    init_partial();
    init_partialRight();
    init_retry();
    init_unary();
    init_mean();
    init_meanBy();
    init_median();
    init_medianBy();
    init_randomInt();
    init_clone();
    init_isPrimitive();
    init_flattenObject();
    init_invert();
    init_isObjectLike();
    init_omitBy();
    init_pickBy();
    init_toMerged();
    init_isBlob();
    init_isEqual();
    init_eq();
    init_isFile();
    init_isFunction();
    init_isJSONValue();
    init_isLength();
    init_isNotNil();
    init_isNull();
    init_isPromise();
    init_isUndefined();
    init_mutex();
    init_semaphore();
    init_timeout();
    init_withTimeout();
    init_capitalize();
    init_constantCase();
    init_deburr();
    init_pascalCase();
    init_invariant();
    init_castArray();
    init_chunk2();
    init_compact2();
    init_concat();
    init_difference2();
    init_differenceBy2();
    init_differenceWith2();
    init_drop2();
    init_dropRight2();
    init_dropRightWhile2();
    init_dropWhile2();
    init_every();
    init_fill2();
    init_filter();
    init_find();
    init_findIndex();
    init_findLastIndex();
    init_flatten2();
    init_flattenDeep2();
    init_flattenDepth();
    init_forEach();
    init_head2();
    init_includes();
    init_indexOf();
    init_intersection2();
    init_intersectionBy2();
    init_join();
    init_last2();
    init_lastIndexOf();
    init_map();
    init_nth();
    init_orderBy();
    init_pull2();
    init_pullAll();
    init_remove2();
    init_reverse();
    init_sample2();
    init_size();
    init_slice();
    init_some();
    init_sortBy();
    init_sortedIndex();
    init_sortedIndexBy();
    init_tail2();
    init_take2();
    init_takeRight2();
    init_takeRightWhile();
    init_union2();
    init_uniq2();
    init_uniqBy2();
    init_unzip2();
    init_without2();
    init_zip2();
    init_zipObjectDeep();
    init_after();
    init_ary2();
    init_attempt();
    init_before();
    init_bind();
    init_bindKey();
    init_curry();
    init_curryRight();
    init_debounce2();
    init_defer();
    init_delay2();
    init_flip();
    init_flow2();
    init_flowRight2();
    init_negate2();
    init_nthArg();
    init_rearg();
    init_rest2();
    init_spread();
    init_throttle();
    init_add();
    init_ceil();
    init_clamp2();
    init_floor();
    init_inRange2();
    init_max();
    init_min();
    init_multiply();
    init_parseInt();
    init_random2();
    init_range2();
    init_rangeRight();
    init_round();
    init_subtract();
    init_sum2();
    init_sumBy();
    init_assignIn();
    init_cloneDeep2();
    init_cloneDeepWith2();
    init_defaults();
    init_findKey2();
    init_fromPairs();
    init_get();
    init_has();
    init_invertBy();
    init_keys();
    init_keysIn();
    init_mapKeys2();
    init_mapValues2();
    init_merge2();
    init_mergeWith();
    init_omit();
    init_pick();
    init_property();
    init_propertyOf();
    init_set();
    init_toDefaulted();
    init_unset();
    init_conforms();
    init_conformsTo();
    init_isArguments();
    init_isArray();
    init_isArrayBuffer2();
    init_isArrayLike();
    init_isArrayLikeObject();
    init_isBoolean();
    init_isBuffer2();
    init_isDate2();
    init_isElement();
    init_isEmpty();
    init_isEqualWith2();
    init_isError();
    init_isFinite();
    init_isInteger();
    init_isMap2();
    init_isMatch();
    init_isNaN();
    init_isNil2();
    init_isNumber();
    init_isObject();
    init_isPlainObject2();
    init_isRegExp2();
    init_isSafeInteger();
    init_isSet2();
    init_isString();
    init_isSymbol();
    init_isTypedArray2();
    init_isWeakMap2();
    init_isWeakSet2();
    init_matches();
    init_matchesProperty();
    init_camelCase2();
    init_deburr2();
    init_endsWith();
    init_escape2();
    init_escapeRegExp2();
    init_kebabCase2();
    init_lowerCase2();
    init_lowerFirst2();
    init_pad2();
    init_padEnd();
    init_padStart();
    init_repeat();
    init_replace();
    init_snakeCase2();
    init_startCase();
    init_startsWith();
    init_template();
    init_toLower();
    init_toUpper();
    init_trim2();
    init_trimEnd2();
    init_trimStart2();
    init_unescape2();
    init_upperCase2();
    init_upperFirst2();
    init_words2();
    init_constant();
    init_defaultTo();
    init_gt();
    init_gte();
    init_invoke();
    init_iteratee();
    init_lt();
    init_lte();
    init_method();
    init_methodOf();
    init_now();
    init_stubArray();
    init_stubFalse();
    init_stubObject();
    init_stubString();
    init_stubTrue();
    init_times();
    init_toArray2();
    init_toFinite();
    init_toInteger();
    init_toLength();
    init_toNumber();
    init_toPath();
    init_toPlainObject();
    init_toSafeInteger();
    init_toString();
    init_uniqueId();
  }
});

// node_modules/@ckeditor/ckeditor5-watchdog/src/utils/getsubnodes.js
function getSubNodes(head3, excludedProperties = /* @__PURE__ */ new Set()) {
  const nodes = [head3];
  const subNodes = /* @__PURE__ */ new Set();
  let nodeIndex = 0;
  while (nodes.length > nodeIndex) {
    const node = nodes[nodeIndex++];
    if (subNodes.has(node) || !shouldNodeBeIncluded(node) || excludedProperties.has(node)) {
      continue;
    }
    subNodes.add(node);
    if (Symbol.iterator in node) {
      try {
        for (const n of node) {
          nodes.push(n);
        }
      } catch (err) {
      }
    } else {
      for (const key in node) {
        if (key === "defaultValue") {
          continue;
        }
        nodes.push(node[key]);
      }
    }
  }
  return subNodes;
}
function shouldNodeBeIncluded(node) {
  const type = Object.prototype.toString.call(node);
  const typeOfNode = typeof node;
  return !(typeOfNode === "number" || typeOfNode === "boolean" || typeOfNode === "string" || typeOfNode === "symbol" || typeOfNode === "function" || type === "[object Date]" || type === "[object RegExp]" || type === "[object Module]" || node === void 0 || node === null || // This flag is meant to exclude singletons shared across editor instances. So when an error is thrown in one editor,
  // the other editors connected through the reference to the same singleton are not restarted. This is a temporary workaround
  // until a better solution is found.
  // More in https://github.com/ckeditor/ckeditor5/issues/12292.
  node._watchdogExcluded || // Skip native DOM objects, e.g. Window, nodes, events, etc.
  node instanceof EventTarget || node instanceof Event);
}
var init_getsubnodes = __esm({
  "node_modules/@ckeditor/ckeditor5-watchdog/src/utils/getsubnodes.js"() {
  }
});

// node_modules/@ckeditor/ckeditor5-watchdog/src/utils/areconnectedthroughproperties.js
function areConnectedThroughProperties(target1, target2, excludedNodes = /* @__PURE__ */ new Set()) {
  if (target1 === target2 && isObject2(target1)) {
    return true;
  }
  const subNodes1 = getSubNodes(target1, excludedNodes);
  const subNodes2 = getSubNodes(target2, excludedNodes);
  for (const node of subNodes1) {
    if (subNodes2.has(node)) {
      return true;
    }
  }
  return false;
}
function isObject2(structure) {
  return typeof structure === "object" && structure !== null;
}
var init_areconnectedthroughproperties = __esm({
  "node_modules/@ckeditor/ckeditor5-watchdog/src/utils/areconnectedthroughproperties.js"() {
    init_getsubnodes();
  }
});

// node_modules/@ckeditor/ckeditor5-watchdog/src/editorwatchdog.js
var EditorWatchdog, EditorWatchdogInitPlugin;
var init_editorwatchdog = __esm({
  "node_modules/@ckeditor/ckeditor5-watchdog/src/editorwatchdog.js"() {
    init_compat();
    init_areconnectedthroughproperties();
    init_watchdog();
    EditorWatchdog = class extends Watchdog {
      /**
       * @param Editor The editor class.
       * @param watchdogConfig The watchdog plugin configuration.
       */
      constructor(Editor, watchdogConfig = {}) {
        super(watchdogConfig);
        /**
         * The current editor instance.
         */
        __publicField(this, "_editor", null);
        /**
         * A promise associated with the life cycle of the editor (creation or destruction processes).
         *
         * It is used to prevent the initialization of the editor if the previous instance has not been destroyed yet,
         * and conversely, to prevent the destruction of the editor if it has not been initialized.
         */
        __publicField(this, "_lifecyclePromise", null);
        /**
         * Throttled save method. The `save()` method is called the specified `saveInterval` after `throttledSave()` is called,
         * unless a new action happens in the meantime.
         */
        __publicField(this, "_throttledSave");
        /**
         * The latest saved editor data represented as a root name -> root data object.
         */
        __publicField(this, "_data");
        /**
         * The last document version.
         */
        __publicField(this, "_lastDocumentVersion");
        /**
         * The editor source element or data.
         */
        __publicField(this, "_elementOrData");
        /**
         * Specifies whether the editor was initialized using document data (`true`) or HTML elements (`false`).
         */
        __publicField(this, "_initUsingData", true);
        /**
         * The latest record of the editor editable elements. Used to restart the editor.
         */
        __publicField(this, "_editables", {});
        /**
         * The editor configuration.
         */
        __publicField(this, "_config");
        __publicField(this, "_excludedProps");
        this._throttledSave = throttle(this._save.bind(this), typeof watchdogConfig.saveInterval === "number" ? watchdogConfig.saveInterval : 5e3);
        if (Editor) {
          this._creator = (elementOrData, config) => Editor.create(elementOrData, config);
        }
        this._destructor = (editor) => editor.destroy();
      }
      /**
       * The current editor instance.
       */
      get editor() {
        return this._editor;
      }
      /**
       * @internal
       */
      get _item() {
        return this._editor;
      }
      /**
       * Sets the function that is responsible for the editor creation.
       * It expects a function that should return a promise.
       *
       * ```ts
       * watchdog.setCreator( ( element, config ) => ClassicEditor.create( element, config ) );
       * ```
       */
      setCreator(creator) {
        this._creator = creator;
      }
      /**
       * Sets the function that is responsible for the editor destruction.
       * Overrides the default destruction function, which destroys only the editor instance.
       * It expects a function that should return a promise or `undefined`.
       *
       * ```ts
       * watchdog.setDestructor( editor => {
       * 	// Do something before the editor is destroyed.
       *
       * 	return editor
       * 		.destroy()
       * 		.then( () => {
       * 			// Do something after the editor is destroyed.
       * 		} );
       * } );
       * ```
       */
      setDestructor(destructor) {
        this._destructor = destructor;
      }
      /**
       * Restarts the editor instance. This method is called whenever an editor error occurs. It fires the `restart` event and changes
       * the state to `initializing`.
       *
       * @fires restart
       */
      _restart() {
        return Promise.resolve().then(() => {
          this.state = "initializing";
          this._fire("stateChange");
          return this._destroy();
        }).catch((err) => {
          console.error("An error happened during the editor destroying.", err);
        }).then(() => {
          const existingRoots = {};
          const lazyRoots = [];
          const oldRootsAttributes = this._config.rootsAttributes || {};
          const rootsAttributes = {};
          for (const [rootName, rootData] of Object.entries(this._data.roots)) {
            if (rootData.isLoaded) {
              existingRoots[rootName] = "";
              rootsAttributes[rootName] = oldRootsAttributes[rootName] || {};
            } else {
              lazyRoots.push(rootName);
            }
          }
          const updatedConfig = {
            ...this._config,
            extraPlugins: this._config.extraPlugins || [],
            lazyRoots,
            rootsAttributes,
            _watchdogInitialData: this._data
          };
          delete updatedConfig.initialData;
          updatedConfig.extraPlugins.push(EditorWatchdogInitPlugin);
          if (this._initUsingData) {
            return this.create(existingRoots, updatedConfig, updatedConfig.context);
          } else {
            if (isElement(this._elementOrData)) {
              return this.create(this._elementOrData, updatedConfig, updatedConfig.context);
            } else {
              return this.create(this._editables, updatedConfig, updatedConfig.context);
            }
          }
        }).then(() => {
          this._fire("restart");
        });
      }
      /**
       * Creates the editor instance and keeps it running, using the defined creator and destructor.
       *
       * @param elementOrData The editor source element or the editor data.
       * @param config The editor configuration.
       * @param context A context for the editor.
       */
      create(elementOrData = this._elementOrData, config = this._config, context) {
        this._lifecyclePromise = Promise.resolve(this._lifecyclePromise).then(() => {
          super._startErrorHandling();
          this._elementOrData = elementOrData;
          this._initUsingData = typeof elementOrData == "string" || Object.keys(elementOrData).length > 0 && typeof Object.values(elementOrData)[0] == "string";
          this._config = this._cloneEditorConfiguration(config) || {};
          this._config.context = context;
          return this._creator(elementOrData, this._config);
        }).then((editor) => {
          this._editor = editor;
          editor.model.document.on("change:data", this._throttledSave);
          this._lastDocumentVersion = editor.model.document.version;
          this._data = this._getData();
          if (!this._initUsingData) {
            this._editables = this._getEditables();
          }
          this.state = "ready";
          this._fire("stateChange");
        }).finally(() => {
          this._lifecyclePromise = null;
        });
        return this._lifecyclePromise;
      }
      /**
       * Destroys the watchdog and the current editor instance. It fires the callback
       * registered in {@link #setDestructor `setDestructor()`} and uses it to destroy the editor instance.
       * It also sets the state to `destroyed`.
       */
      destroy() {
        this._lifecyclePromise = Promise.resolve(this._lifecyclePromise).then(() => {
          this.state = "destroyed";
          this._fire("stateChange");
          super.destroy();
          return this._destroy();
        }).finally(() => {
          this._lifecyclePromise = null;
        });
        return this._lifecyclePromise;
      }
      _destroy() {
        return Promise.resolve().then(() => {
          this._stopErrorHandling();
          this._throttledSave.cancel();
          const editor = this._editor;
          this._editor = null;
          editor.model.document.off("change:data", this._throttledSave);
          return this._destructor(editor);
        });
      }
      /**
       * Saves the editor data, so it can be restored after the crash even if the data cannot be fetched at
       * the moment of the crash.
       */
      _save() {
        const version = this._editor.model.document.version;
        try {
          this._data = this._getData();
          if (!this._initUsingData) {
            this._editables = this._getEditables();
          }
          this._lastDocumentVersion = version;
        } catch (err) {
          console.error(err, "An error happened during restoring editor data. Editor will be restored from the previously saved data.");
        }
      }
      /**
       * @internal
       */
      _setExcludedProperties(props) {
        this._excludedProps = props;
      }
      /**
       * Gets all data that is required to reinitialize editor instance.
       */
      _getData() {
        const editor = this._editor;
        const roots = editor.model.document.roots.filter((root) => root.isAttached() && root.rootName != "$graveyard");
        const { plugins } = editor;
        const commentsRepository = plugins.has("CommentsRepository") && plugins.get("CommentsRepository");
        const trackChanges = plugins.has("TrackChanges") && plugins.get("TrackChanges");
        const data = {
          roots: {},
          markers: {},
          commentThreads: JSON.stringify([]),
          suggestions: JSON.stringify([])
        };
        roots.forEach((root) => {
          data.roots[root.rootName] = {
            content: JSON.stringify(Array.from(root.getChildren())),
            attributes: JSON.stringify(Array.from(root.getAttributes())),
            isLoaded: root._isLoaded
          };
        });
        for (const marker of editor.model.markers) {
          if (!marker._affectsData) {
            continue;
          }
          data.markers[marker.name] = {
            rangeJSON: marker.getRange().toJSON(),
            usingOperation: marker._managedUsingOperations,
            affectsData: marker._affectsData
          };
        }
        if (commentsRepository) {
          data.commentThreads = JSON.stringify(commentsRepository.getCommentThreads({ toJSON: true, skipNotAttached: true }));
        }
        if (trackChanges) {
          data.suggestions = JSON.stringify(trackChanges.getSuggestions({ toJSON: true, skipNotAttached: true }));
        }
        return data;
      }
      /**
       * For each attached model root, returns its HTML editable element (if available).
       */
      _getEditables() {
        const editables = {};
        for (const rootName of this.editor.model.document.getRootNames()) {
          const editable = this.editor.ui.getEditableElement(rootName);
          if (editable) {
            editables[rootName] = editable;
          }
        }
        return editables;
      }
      /**
       * Traverses the error context and the current editor to find out whether these structures are connected
       * to each other via properties.
       *
       * @internal
       */
      _isErrorComingFromThisItem(error) {
        return areConnectedThroughProperties(this._editor, error.context, this._excludedProps);
      }
      /**
       * Clones the editor configuration.
       */
      _cloneEditorConfiguration(config) {
        return cloneDeepWith2(config, (value, key) => {
          if (isElement(value)) {
            return value;
          }
          if (key === "context") {
            return value;
          }
        });
      }
    };
    EditorWatchdogInitPlugin = class {
      constructor(editor) {
        __publicField(this, "editor");
        __publicField(this, "_data");
        this.editor = editor;
        this._data = editor.config.get("_watchdogInitialData");
      }
      /**
       * @inheritDoc
       */
      init() {
        this.editor.data.on("init", (evt) => {
          evt.stop();
          this.editor.model.enqueueChange({ isUndoable: false }, (writer) => {
            this._restoreCollaborationData();
            this._restoreEditorData(writer);
          });
          this.editor.data.fire("ready");
        }, { priority: 1e3 - 1 });
      }
      /**
       * Creates a model node (element or text) based on provided JSON.
       */
      _createNode(writer, jsonNode) {
        if ("name" in jsonNode) {
          const element = writer.createElement(jsonNode.name, jsonNode.attributes);
          if (jsonNode.children) {
            for (const child of jsonNode.children) {
              element._appendChild(this._createNode(writer, child));
            }
          }
          return element;
        } else {
          return writer.createText(jsonNode.data, jsonNode.attributes);
        }
      }
      /**
       * Restores the editor by setting the document data, roots attributes and markers.
       */
      _restoreEditorData(writer) {
        const editor = this.editor;
        Object.entries(this._data.roots).forEach(([rootName, { content, attributes }]) => {
          const parsedNodes = JSON.parse(content);
          const parsedAttributes = JSON.parse(attributes);
          const rootElement = editor.model.document.getRoot(rootName);
          for (const [key, value] of parsedAttributes) {
            writer.setAttribute(key, value, rootElement);
          }
          for (const child of parsedNodes) {
            const node = this._createNode(writer, child);
            writer.insert(node, rootElement, "end");
          }
        });
        Object.entries(this._data.markers).forEach(([markerName, markerOptions]) => {
          const { document } = editor.model;
          const { rangeJSON: { start, end }, ...options } = markerOptions;
          const root = document.getRoot(start.root);
          const startPosition = writer.createPositionFromPath(root, start.path, start.stickiness);
          const endPosition = writer.createPositionFromPath(root, end.path, end.stickiness);
          const range3 = writer.createRange(startPosition, endPosition);
          writer.addMarker(markerName, {
            range: range3,
            ...options
          });
        });
      }
      /**
       * Restores the editor collaboration data - comment threads and suggestions.
       */
      _restoreCollaborationData() {
        const parsedCommentThreads = JSON.parse(this._data.commentThreads);
        const parsedSuggestions = JSON.parse(this._data.suggestions);
        parsedCommentThreads.forEach((commentThreadData) => {
          const channelId = this.editor.config.get("collaboration.channelId");
          const commentsRepository = this.editor.plugins.get("CommentsRepository");
          if (commentsRepository.hasCommentThread(commentThreadData.threadId)) {
            const commentThread = commentsRepository.getCommentThread(commentThreadData.threadId);
            commentThread.remove();
          }
          commentsRepository.addCommentThread({ channelId, ...commentThreadData });
        });
        parsedSuggestions.forEach((suggestionData) => {
          const trackChangesEditing = this.editor.plugins.get("TrackChangesEditing");
          if (trackChangesEditing.hasSuggestion(suggestionData.id)) {
            const suggestion = trackChangesEditing.getSuggestion(suggestionData.id);
            suggestion.attributes = suggestionData.attributes;
          } else {
            trackChangesEditing.addSuggestionData(suggestionData);
          }
        });
      }
    };
  }
});

// node_modules/@ckeditor/ckeditor5-watchdog/src/contextwatchdog.js
function toArray3(elementOrArray) {
  return Array.isArray(elementOrArray) ? elementOrArray : [elementOrArray];
}
var mainQueueId, ContextWatchdog, ActionQueues;
var init_contextwatchdog = __esm({
  "node_modules/@ckeditor/ckeditor5-watchdog/src/contextwatchdog.js"() {
    init_watchdog();
    init_editorwatchdog();
    init_areconnectedthroughproperties();
    init_getsubnodes();
    mainQueueId = Symbol("MainQueueId");
    ContextWatchdog = class extends Watchdog {
      /**
       * The context watchdog class constructor.
       *
       * ```ts
       * const watchdog = new ContextWatchdog( Context );
       *
       * await watchdog.create( contextConfiguration );
       *
       * await watchdog.add( item );
       * ```
       *
       * See the {@glink features/watchdog Watchdog feature guide} to learn more how to use this feature.
       *
       * @param Context The {@link module:core/context~Context} class.
       * @param watchdogConfig The watchdog configuration.
       */
      constructor(Context, watchdogConfig = {}) {
        super(watchdogConfig);
        /**
         * A map of internal watchdogs for added items.
         */
        __publicField(this, "_watchdogs", /* @__PURE__ */ new Map());
        /**
         * The watchdog configuration.
         */
        __publicField(this, "_watchdogConfig");
        /**
         * The current context instance.
         */
        __publicField(this, "_context", null);
        /**
         * Context properties (nodes/references) that are gathered during the initial context creation
         * and are used to distinguish the origin of an error.
         */
        __publicField(this, "_contextProps", /* @__PURE__ */ new Set());
        /**
         * An action queue, which is used to handle async functions queuing.
         */
        __publicField(this, "_actionQueues", new ActionQueues());
        /**
         * The configuration for the {@link module:core/context~Context}.
         */
        __publicField(this, "_contextConfig");
        /**
         * The watched item.
         */
        __publicField(this, "_item");
        this._watchdogConfig = watchdogConfig;
        this._creator = (contextConfig) => Context.create(contextConfig);
        this._destructor = (context) => context.destroy();
        this._actionQueues.onEmpty(() => {
          if (this.state === "initializing") {
            this.state = "ready";
            this._fire("stateChange");
          }
        });
      }
      /**
       * Sets the function that is responsible for the context creation.
       * It expects a function that should return a promise (or `undefined`).
       *
       * ```ts
       * watchdog.setCreator( config => Context.create( config ) );
       * ```
       */
      setCreator(creator) {
        this._creator = creator;
      }
      /**
       * Sets the function that is responsible for the context destruction.
       * Overrides the default destruction function, which destroys only the context instance.
       * It expects a function that should return a promise (or `undefined`).
       *
       * ```ts
       * watchdog.setDestructor( context => {
       * 	// Do something before the context is destroyed.
       *
       * 	return context
       * 		.destroy()
       * 		.then( () => {
       * 			// Do something after the context is destroyed.
       * 		} );
       * } );
       * ```
       */
      setDestructor(destructor) {
        this._destructor = destructor;
      }
      /**
       * The context instance. Keep in mind that this property might be changed when the context watchdog restarts,
       * so do not keep this instance internally. Always operate on the `ContextWatchdog#context` property.
       */
      get context() {
        return this._context;
      }
      /**
       * Initializes the context watchdog. Once it is created, the watchdog takes care about
       * recreating the context and the provided items, and starts the error handling mechanism.
       *
       * ```ts
       * await watchdog.create( {
       * 	plugins: []
       * } );
       * ```
       *
       * @param contextConfig The context configuration. See {@link module:core/context~Context}.
       */
      create(contextConfig = {}) {
        return this._actionQueues.enqueue(mainQueueId, () => {
          this._contextConfig = contextConfig;
          return this._create();
        });
      }
      /**
       * Returns an item instance with the given `itemId`.
       *
       * ```ts
       * const editor1 = watchdog.getItem( 'editor1' );
       * ```
       *
       * @param itemId The item ID.
       * @returns The item instance or `undefined` if an item with a given ID has not been found.
       */
      getItem(itemId) {
        const watchdog = this._getWatchdog(itemId);
        return watchdog._item;
      }
      /**
       * Gets the state of the given item. See {@link #state} for a list of available states.
       *
       * ```ts
       * const editor1State = watchdog.getItemState( 'editor1' );
       * ```
       *
       * @param itemId Item ID.
       * @returns The state of the item.
       */
      getItemState(itemId) {
        const watchdog = this._getWatchdog(itemId);
        return watchdog.state;
      }
      /**
       * Adds items to the watchdog. Once created, instances of these items will be available using the {@link #getItem} method.
       *
       * Items can be passed together as an array of objects:
       *
       * ```ts
       * await watchdog.add( [ {
       * 	id: 'editor1',
       * 	type: 'editor',
       * 	sourceElementOrData: document.querySelector( '#editor' ),
       * 	config: {
       * 		plugins: [ Essentials, Paragraph, Bold, Italic ],
       * 		toolbar: [ 'bold', 'italic', 'alignment' ]
       * 	},
       * 	creator: ( element, config ) => ClassicEditor.create( element, config )
       * } ] );
       * ```
       *
       * Or one by one as objects:
       *
       * ```ts
       * await watchdog.add( {
       * 	id: 'editor1',
       * 	type: 'editor',
       * 	sourceElementOrData: document.querySelector( '#editor' ),
       * 	config: {
       * 		plugins: [ Essentials, Paragraph, Bold, Italic ],
       * 		toolbar: [ 'bold', 'italic', 'alignment' ]
       * 	},
       * 	creator: ( element, config ) => ClassicEditor.create( element, config )
       * ] );
       * ```
       *
       * Then an instance can be retrieved using the {@link #getItem} method:
       *
       * ```ts
       * const editor1 = watchdog.getItem( 'editor1' );
       * ```
       *
       * Note that this method can be called multiple times, but for performance reasons it is better
       * to pass all items together.
       *
       * @param itemConfigurationOrItemConfigurations An item configuration object or an array of item configurations.
       */
      add(itemConfigurationOrItemConfigurations) {
        const itemConfigurations = toArray3(itemConfigurationOrItemConfigurations);
        return Promise.all(itemConfigurations.map((item) => {
          return this._actionQueues.enqueue(item.id, () => {
            if (this.state === "destroyed") {
              throw new Error("Cannot add items to destroyed watchdog.");
            }
            if (!this._context) {
              throw new Error("Context was not created yet. You should call the `ContextWatchdog#create()` method first.");
            }
            let watchdog;
            if (this._watchdogs.has(item.id)) {
              throw new Error(`Item with the given id is already added: '${item.id}'.`);
            }
            if (item.type === "editor") {
              watchdog = new EditorWatchdog(null, this._watchdogConfig);
              watchdog.setCreator(item.creator);
              watchdog._setExcludedProperties(this._contextProps);
              if (item.destructor) {
                watchdog.setDestructor(item.destructor);
              }
              this._watchdogs.set(item.id, watchdog);
              watchdog.on("error", (evt, { error, causesRestart }) => {
                this._fire("itemError", { itemId: item.id, error });
                if (!causesRestart) {
                  return;
                }
                this._actionQueues.enqueue(item.id, () => new Promise((res) => {
                  const rethrowRestartEventOnce = () => {
                    watchdog.off("restart", rethrowRestartEventOnce);
                    this._fire("itemRestart", { itemId: item.id });
                    res();
                  };
                  watchdog.on("restart", rethrowRestartEventOnce);
                }));
              });
              return watchdog.create(item.sourceElementOrData, item.config, this._context);
            } else {
              throw new Error(`Not supported item type: '${item.type}'.`);
            }
          });
        }));
      }
      /**
       * Removes and destroys item(s) with given ID(s).
       *
       * ```ts
       * await watchdog.remove( 'editor1' );
       * ```
       *
       * Or
       *
       * ```ts
       * await watchdog.remove( [ 'editor1', 'editor2' ] );
       * ```
       *
       * @param itemIdOrItemIds Item ID or an array of item IDs.
       */
      remove(itemIdOrItemIds) {
        const itemIds = toArray3(itemIdOrItemIds);
        return Promise.all(itemIds.map((itemId) => {
          return this._actionQueues.enqueue(itemId, () => {
            const watchdog = this._getWatchdog(itemId);
            this._watchdogs.delete(itemId);
            return watchdog.destroy();
          });
        }));
      }
      /**
       * Destroys the context watchdog and all added items.
       * Once the context watchdog is destroyed, new items cannot be added.
       *
       * ```ts
       * await watchdog.destroy();
       * ```
       */
      destroy() {
        return this._actionQueues.enqueue(mainQueueId, () => {
          this.state = "destroyed";
          this._fire("stateChange");
          super.destroy();
          return this._destroy();
        });
      }
      /**
       * Restarts the context watchdog.
       */
      _restart() {
        return this._actionQueues.enqueue(mainQueueId, () => {
          this.state = "initializing";
          this._fire("stateChange");
          return this._destroy().catch((err) => {
            console.error("An error happened during destroying the context or items.", err);
          }).then(() => this._create()).then(() => this._fire("restart"));
        });
      }
      /**
       * Initializes the context watchdog.
       */
      _create() {
        return Promise.resolve().then(() => {
          this._startErrorHandling();
          return this._creator(this._contextConfig);
        }).then((context) => {
          this._context = context;
          this._contextProps = getSubNodes(this._context);
          return Promise.all(Array.from(this._watchdogs.values()).map((watchdog) => {
            watchdog._setExcludedProperties(this._contextProps);
            return watchdog.create(void 0, void 0, this._context);
          }));
        });
      }
      /**
       * Destroys the context instance and all added items.
       */
      _destroy() {
        return Promise.resolve().then(() => {
          this._stopErrorHandling();
          const context = this._context;
          this._context = null;
          this._contextProps = /* @__PURE__ */ new Set();
          return Promise.all(Array.from(this._watchdogs.values()).map((watchdog) => watchdog.destroy())).then(() => this._destructor(context));
        });
      }
      /**
       * Returns the watchdog for a given item ID.
       *
       * @param itemId Item ID.
       */
      _getWatchdog(itemId) {
        const watchdog = this._watchdogs.get(itemId);
        if (!watchdog) {
          throw new Error(`Item with the given id was not registered: ${itemId}.`);
        }
        return watchdog;
      }
      /**
       * Checks whether an error comes from the context instance and not from the item instances.
       *
       * @internal
       */
      _isErrorComingFromThisItem(error) {
        for (const watchdog of this._watchdogs.values()) {
          if (watchdog._isErrorComingFromThisItem(error)) {
            return false;
          }
        }
        return areConnectedThroughProperties(this._context, error.context);
      }
    };
    ActionQueues = class {
      constructor() {
        __publicField(this, "_onEmptyCallbacks", []);
        __publicField(this, "_queues", /* @__PURE__ */ new Map());
        __publicField(this, "_activeActions", 0);
      }
      /**
       * Used to register callbacks that will be run when the queue becomes empty.
       *
       * @param onEmptyCallback A callback that will be run whenever the queue becomes empty.
       */
      onEmpty(onEmptyCallback) {
        this._onEmptyCallbacks.push(onEmptyCallback);
      }
      /**
       * It adds asynchronous actions (functions) to the proper queue and runs them one by one.
       *
       * @param queueId The action queue ID.
       * @param action A function that should be enqueued.
       */
      enqueue(queueId, action) {
        const isMainAction = queueId === mainQueueId;
        this._activeActions++;
        if (!this._queues.get(queueId)) {
          this._queues.set(queueId, Promise.resolve());
        }
        const awaitedActions = isMainAction ? Promise.all(this._queues.values()) : Promise.all([this._queues.get(mainQueueId), this._queues.get(queueId)]);
        const queueWithAction = awaitedActions.then(action);
        const nonErrorQueue = queueWithAction.catch(() => {
        });
        this._queues.set(queueId, nonErrorQueue);
        return queueWithAction.finally(() => {
          this._activeActions--;
          if (this._queues.get(queueId) === nonErrorQueue && this._activeActions === 0) {
            this._onEmptyCallbacks.forEach((cb) => cb());
          }
        });
      }
    };
  }
});

// node_modules/@ckeditor/ckeditor5-watchdog/src/augmentation.js
var init_augmentation = __esm({
  "node_modules/@ckeditor/ckeditor5-watchdog/src/augmentation.js"() {
  }
});

// node_modules/@ckeditor/ckeditor5-watchdog/src/index.js
var src_exports = {};
__export(src_exports, {
  ContextWatchdog: () => ContextWatchdog,
  EditorWatchdog: () => EditorWatchdog,
  Watchdog: () => Watchdog
});
var init_src = __esm({
  "node_modules/@ckeditor/ckeditor5-watchdog/src/index.js"() {
    init_contextwatchdog();
    init_editorwatchdog();
    init_watchdog();
    init_augmentation();
  }
});

// node_modules/@ckeditor/ckeditor5-react/dist/index.js
var require_dist = __commonJS({
  "node_modules/@ckeditor/ckeditor5-react/dist/index.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports && "object" == typeof module ? module.exports = e(require_react(), require_prop_types(), (init_src(), __toCommonJS(src_exports))) : "function" == typeof define && define.amd ? define(["react", "prop-types", "@ckeditor/ckeditor5-watchdog"], e) : "object" == typeof exports ? exports.CKEditor = e(require_react(), require_prop_types(), (init_src(), __toCommonJS(src_exports))) : t.CKEditor = e(t.react, t["prop-types"], t["@ckeditor/ckeditor5-watchdog"]);
    }(self, (t, e, o) => (() => {
      "use strict";
      var r = { 546: (t2) => {
        t2.exports = o;
      }, 949: (t2) => {
        t2.exports = e;
      }, 155: (e2) => {
        e2.exports = t;
      } }, i = {};
      function n(t2) {
        var e2 = i[t2];
        if (void 0 !== e2) return e2.exports;
        var o2 = i[t2] = { exports: {} };
        return r[t2](o2, o2.exports, n), o2.exports;
      }
      n.n = (t2) => {
        var e2 = t2 && t2.__esModule ? () => t2.default : () => t2;
        return n.d(e2, { a: e2 }), e2;
      }, n.d = (t2, e2) => {
        for (var o2 in e2) n.o(e2, o2) && !n.o(t2, o2) && Object.defineProperty(t2, o2, { enumerable: true, get: e2[o2] });
      }, n.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), n.r = (t2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
      };
      var a = {};
      return (() => {
        n.r(a), n.d(a, { CKEditor: () => u, CKEditorContext: () => c, useMultiRootEditor: () => f });
        var t2 = n(155), e2 = n.n(t2), o2 = n(949), r2 = n.n(o2);
        const i2 = new Array(256).fill("").map((t3, e3) => ("0" + e3.toString(16)).slice(-2));
        var s = n(546);
        const d = e2().createContext("contextWatchdog");
        class c extends e2().Component {
          constructor(t3, e3) {
            super(t3, e3), this.contextWatchdog = null, this.props.isLayoutReady && this._initializeContextWatchdog(this.props.config);
          }
          shouldComponentUpdate(t3) {
            return this._shouldComponentUpdate(t3);
          }
          async _shouldComponentUpdate(t3) {
            return t3.id !== this.props.id && (this.contextWatchdog && await this.contextWatchdog.destroy(), await this._initializeContextWatchdog(t3.config)), t3.isLayoutReady && !this.contextWatchdog ? (await this._initializeContextWatchdog(t3.config), true) : this.props.children !== t3.children;
          }
          render() {
            return e2().createElement(d.Provider, { value: this.contextWatchdog }, this.props.children);
          }
          componentWillUnmount() {
            this._destroyContext();
          }
          async _initializeContextWatchdog(t3) {
            this.contextWatchdog = new s.ContextWatchdog(this.props.context, this.props.watchdogConfig), this.contextWatchdog.on("error", (t4, e3) => {
              this.props.onError(e3.error, { phase: "runtime", willContextRestart: e3.causesRestart });
            }), this.contextWatchdog.on("stateChange", () => {
              "ready" === this.contextWatchdog.state && this.props.onReady && this.props.onReady(this.contextWatchdog.context);
            }), await this.contextWatchdog.create(t3).catch((t4) => {
              this.props.onError(t4, { phase: "initialization", willContextRestart: false });
            });
          }
          async _destroyContext() {
            this.contextWatchdog && (await this.contextWatchdog.destroy(), this.contextWatchdog = null);
          }
        }
        c.defaultProps = { isLayoutReady: true, onError: (t3, e3) => console.error(t3, e3) }, c.propTypes = { id: r2().string, isLayoutReady: r2().bool, context: r2().func, watchdogConfig: r2().object, config: r2().object, onReady: r2().func, onError: r2().func };
        const h = "Lock from React integration (@ckeditor/ckeditor5-react)";
        class u extends e2().Component {
          constructor(t3) {
            super(t3), this.editorDestructionInProgress = null, this.domContainer = e2().createRef(), this.watchdog = null;
            const { CKEDITOR_VERSION: o3 } = window;
            if (o3) {
              const [t4] = o3.split(".").map(Number);
              t4 < 37 && console.warn("The <CKEditor> component requires using CKEditor 5 in version 37 or higher.");
            } else console.warn('Cannot find the "CKEDITOR_VERSION" in the "window" scope.');
          }
          get editor() {
            return this.props.disableWatchdog ? this.instance : this.watchdog ? this.watchdog.editor : null;
          }
          shouldComponentUpdate(t3) {
            return !!this.editor && (t3.id !== this.props.id || (t3.disableWatchdog !== this.props.disableWatchdog || (this._shouldUpdateEditor(t3) && this.editor.data.set(t3.data), "disabled" in t3 && (t3.disabled ? this.editor.enableReadOnlyMode(h) : this.editor.disableReadOnlyMode(h)), false)));
          }
          async componentDidMount() {
            await this._initializeEditor();
          }
          async componentDidUpdate() {
            await this._destroyEditor(), await this._initializeEditor();
          }
          async componentWillUnmount() {
            await this._destroyEditor();
          }
          render() {
            return e2().createElement("div", { ref: this.domContainer });
          }
          async _initializeEditor() {
            await this.editorDestructionInProgress, this.props.disableWatchdog ? this.instance = await this._createEditor(this.domContainer.current, this._getConfig()) : this.watchdog || (this.context instanceof s.ContextWatchdog ? this.watchdog = new l(this.context) : this.watchdog = new u._EditorWatchdog(this.props.editor, this.props.watchdogConfig), this.watchdog.setCreator((t3, e3) => this._createEditor(t3, e3)), this.watchdog.on("error", (t3, { error: e3, causesRestart: o3 }) => {
              (this.props.onError || console.error)(e3, { phase: "runtime", willEditorRestart: o3 });
            }), await this.watchdog.create(this.domContainer.current, this._getConfig()).catch((t3) => {
              (this.props.onError || console.error)(t3, { phase: "initialization", willEditorRestart: false });
            }));
          }
          _createEditor(t3, e3) {
            return this.props.editor.create(t3, e3).then((t4) => {
              "disabled" in this.props && this.props.disabled && t4.enableReadOnlyMode(h);
              const e4 = t4.model.document, o3 = t4.editing.view.document;
              return e4.on("change:data", (e5) => {
                this.props.onChange && this.props.onChange(e5, t4);
              }), o3.on("focus", (e5) => {
                this.props.onFocus && this.props.onFocus(e5, t4);
              }), o3.on("blur", (e5) => {
                this.props.onBlur && this.props.onBlur(e5, t4);
              }), setTimeout(() => {
                this.props.onReady && this.props.onReady(t4);
              }), t4;
            });
          }
          async _destroyEditor() {
            this.editorDestructionInProgress = new Promise((t3) => {
              setTimeout(async () => this.watchdog ? (await this.watchdog.destroy(), this.watchdog = null, t3()) : this.instance ? (await this.instance.destroy(), this.instance = null, t3()) : void t3());
            });
          }
          _shouldUpdateEditor(t3) {
            return this.props.data !== t3.data && this.editor.data.get() !== t3.data;
          }
          _getConfig() {
            const t3 = this.props.config || {};
            return this.props.data && t3.initialData && console.warn("Editor data should be provided either using `config.initialData` or `content` property. The config value takes precedence over `content` property and will be used when both are specified."), { ...t3, initialData: t3.initialData || this.props.data || "" };
          }
        }
        u.contextType = d, u.propTypes = { editor: r2().func.isRequired, data: r2().string, config: r2().object, disableWatchdog: r2().bool, watchdogConfig: r2().object, onChange: r2().func, onReady: r2().func, onFocus: r2().func, onBlur: r2().func, onError: r2().func, disabled: r2().bool, id: r2().any }, u._EditorWatchdog = s.EditorWatchdog;
        class l {
          constructor(t3) {
            this._contextWatchdog = t3, this._id = function() {
              const t4 = 4294967296 * Math.random() >>> 0, e3 = 4294967296 * Math.random() >>> 0, o3 = 4294967296 * Math.random() >>> 0, r3 = 4294967296 * Math.random() >>> 0;
              return "e" + i2[255 & t4] + i2[t4 >> 8 & 255] + i2[t4 >> 16 & 255] + i2[t4 >> 24 & 255] + i2[255 & e3] + i2[e3 >> 8 & 255] + i2[e3 >> 16 & 255] + i2[e3 >> 24 & 255] + i2[255 & o3] + i2[o3 >> 8 & 255] + i2[o3 >> 16 & 255] + i2[o3 >> 24 & 255] + i2[255 & r3] + i2[r3 >> 8 & 255] + i2[r3 >> 16 & 255] + i2[r3 >> 24 & 255];
            }();
          }
          setCreator(t3) {
            this._creator = t3;
          }
          create(t3, e3) {
            return this._contextWatchdog.add({ sourceElementOrData: t3, config: e3, creator: this._creator, id: this._id, type: "editor" });
          }
          on(t3, e3) {
            this._contextWatchdog.on("itemError", (t4, { itemId: o3, error: r3 }) => {
              o3 === this._id && e3(null, { error: r3, causesRestart: void 0 });
            });
          }
          destroy() {
            return "ready" === this._contextWatchdog.state ? this._contextWatchdog.remove(this._id) : Promise.resolve();
          }
          get editor() {
            return this._contextWatchdog.getItem(this._id);
          }
        }
        const p = "Lock from React integration (@ckeditor/ckeditor5-react)", g = ({ editor: o3 }) => {
          const r3 = (0, t2.useRef)(null);
          return (0, t2.useEffect)(() => {
            const t3 = r3.current;
            if (!o3 || !t3) return;
            const e3 = o3.ui.view.toolbar.element;
            return t3 && t3.appendChild(e3), () => {
              t3 && t3.removeChild(e3);
            };
          }, [o3 && o3.id]), e2().createElement("div", { ref: r3 });
        }, f = (o3) => {
          const r3 = (0, t2.useRef)(null), i3 = (0, t2.useRef)(null), n2 = (0, t2.useContext)(d), [a2, c2] = (0, t2.useState)(null), [h2, u2] = (0, t2.useState)(o3.data), [f2, y] = (0, t2.useState)(o3.rootsAttributes || {}), [m, b] = (0, t2.useState)([]), w = (0, t2.useRef)(true);
          (0, t2.useEffect)(() => ((async () => {
            await i3.current, false !== o3.isLayoutReady && await v();
          })(), () => {
            x().then(() => {
              i3.current = null;
            });
          }), [o3.isLayoutReady]), (0, t2.useEffect)(() => {
            a2 && (o3.disabled ? a2.enableReadOnlyMode(p) : a2.disableReadOnlyMode(p));
          }, [o3.disabled]), (0, t2.useEffect)(() => {
            if (a2 && !i3.current) {
              const t3 = a2.getFullData();
              u2({ ...t3 }), y({ ...a2.getRootsAttributes() }), b([...Object.keys(t3).map((t4) => C(a2, t4))]);
            }
          }, [a2 && a2.id]);
          const E = () => {
            const t3 = o3.config || {};
            return o3.data && t3.initialData && console.warn("Editor data should be provided either using `config.initialData` or `data` property. The config value takes precedence over `data` property and will be used when both are specified."), { ...t3, rootsAttributes: f2 };
          }, C = (t3, o4) => e2().createElement("div", { id: o4, key: o4, ref: (e3) => {
            if (e3) {
              const r4 = t3.ui.view.createEditable(o4, e3);
              t3.ui.addEditable(r4), t3.editing.view.forceRender();
            }
          } }), R = (t3, e3) => o3.editor.create(t3, e3).then((t4) => {
            o3.disabled && o3.disabled && t4.enableReadOnlyMode(p);
            const e4 = t4.model.document, r4 = t4.editing.view.document;
            return e4.on("change:data", (e5) => ((t5, e6) => {
              const r5 = t5.model.document;
              if (!o3.disableTwoWayDataBinding) {
                const e7 = {}, o4 = {};
                r5.differ.getChanges().forEach((o5) => {
                  let r6;
                  if (r6 = "insert" == o5.type || "remove" == o5.type ? o5.position.root : o5.range.root, !r6.isAttached()) return;
                  const { rootName: i4 } = r6;
                  e7[i4] = t5.getData({ rootName: i4 });
                }), r5.differ.getChangedRoots().forEach((r6) => {
                  if (r6.state) return void (void 0 !== e7[r6.name] && delete e7[r6.name]);
                  const i4 = r6.name;
                  o4[i4] = t5.getRootAttributes(i4);
                }), Object.keys(e7).length && u2((t6) => ({ ...t6, ...e7 })), Object.keys(o4).length && y((t6) => ({ ...t6, ...o4 }));
              }
              o3.onChange && o3.onChange(e6, t5);
            })(t4, e5)), t4.on("addRoot", (e5, r5) => ((t5, e6, r6) => {
              const i4 = r6.rootName, n3 = C(t5, i4);
              o3.disableTwoWayDataBinding || (u2((e7) => ({ ...e7, [i4]: t5.getData({ rootName: i4 }) })), y((e7) => ({ ...e7, [i4]: t5.getRootAttributes(i4) }))), b((t6) => [...t6, n3]);
            })(t4, 0, r5)), t4.on("detachRoot", (e5, r5) => ((t5, e6, r6) => {
              const i4 = r6.rootName;
              b((t6) => t6.filter((t7) => t7.props.id !== i4)), o3.disableTwoWayDataBinding || (u2((t6) => {
                const { [i4]: e7, ...o4 } = t6;
                return { ...o4 };
              }), y((t6) => {
                const { [i4]: e7, ...o4 } = t6;
                return { ...o4 };
              })), t5.detachEditable(r6);
            })(t4, 0, r5)), r4.on("focus", (e5) => {
              o3.onFocus && o3.onFocus(e5, t4);
            }), r4.on("blur", (e5) => {
              o3.onBlur && o3.onBlur(e5, t4);
            }), c2(t4), o3.onReady && o3.onReady(t4), t4;
          }), x = async () => {
            c2(null), u2({}), y({}), b([]), i3.current = new Promise((t3) => {
              setTimeout(async () => r3.current ? (await r3.current.destroy(), r3.current = null, t3()) : a2 ? (await a2.destroy(), t3()) : void t3());
            });
          }, v = async () => {
            if (o3.disableWatchdog) return void await R(o3.data, E());
            if (r3.current) return;
            n2 instanceof s.ContextWatchdog ? r3.current = new l(n2) : r3.current = new s.EditorWatchdog(o3.editor, o3.watchdogConfig);
            const t3 = r3.current;
            t3.setCreator((t4, e3) => R(t4, e3)), t3.on("error", (t4, { error: e3, causesRestart: r4 }) => {
              (o3.onError || console.error)(e3, { phase: "runtime", willEditorRestart: r4 });
            }), await t3.create(h2, E()).catch((t4) => {
              (o3.onError || console.error)(t4, { phase: "initialization", willEditorRestart: false });
            });
          };
          (0, t2.useEffect)(() => {
            if (a2 && w.current) {
              w.current = false;
              const t3 = Object.keys(h2), e3 = Object.keys(f2);
              if (!t3.every((t4) => e3.includes(t4))) throw new Error("`data` and `attributes` objects must have the same keys (roots).");
              const o4 = a2.getFullData(), r4 = a2.getRootsAttributes(), { addedKeys: i4, removedKeys: n3 } = W(o4, h2 || {}), s2 = t3.some((t4) => void 0 !== o4[t4] && JSON.stringify(o4[t4]) !== JSON.stringify(h2[t4])), d2 = e3.filter((t4) => JSON.stringify(r4[t4]) !== JSON.stringify(f2[t4]));
              a2.model.change((t4) => {
                _(i4), k(n3), s2 && O(), d2.length && D(t4, d2);
              });
            }
          }, [h2, f2]);
          const W = (t3, e3) => {
            const o4 = Object.keys(t3), r4 = Object.keys(e3);
            return { addedKeys: r4.filter((t4) => !o4.includes(t4)), removedKeys: o4.filter((t4) => !r4.includes(t4)) };
          }, _ = (t3) => {
            t3.forEach((t4) => {
              a2.addRoot(t4, { data: h2[t4] || "", attributes: (null == f2 ? void 0 : f2[t4]) || {}, isUndoable: true });
            });
          }, k = (t3) => {
            t3.forEach((t4) => {
              a2.detachRoot(t4, true);
            });
          }, O = () => {
            a2.data.set(h2, { suppressErrorInCollaboration: true });
          }, D = (t3, e3) => {
            e3.forEach((e4) => {
              Object.keys(f2[e4]).forEach((t4) => {
                a2.registerRootAttribute(t4);
              }), t3.clearAttributes(a2.model.document.getRoot(e4)), t3.setAttributes(f2[e4], a2.model.document.getRoot(e4));
            });
          }, j = (0, t2.useCallback)((t3) => {
            w.current = true, u2(t3);
          }, [u2]), S = (0, t2.useCallback)((t3) => {
            w.current = true, y(t3);
          }, [y]);
          return { editor: a2, editableElements: m, toolbarElement: e2().createElement(g, { editor: a2 }), data: h2, setData: j, attributes: f2, setAttributes: S };
        };
      })(), a;
    })());
  }
});
export default require_dist();
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

@ckeditor/ckeditor5-watchdog/src/watchdog.js:
  (**
   * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
   *)

@ckeditor/ckeditor5-watchdog/src/utils/getsubnodes.js:
  (**
   * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
   *)

@ckeditor/ckeditor5-watchdog/src/utils/areconnectedthroughproperties.js:
  (**
   * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
   *)
  (* istanbul ignore next -- @preserve *)

@ckeditor/ckeditor5-watchdog/src/editorwatchdog.js:
  (**
   * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
   *)

@ckeditor/ckeditor5-watchdog/src/contextwatchdog.js:
  (**
   * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
   *)

@ckeditor/ckeditor5-watchdog/src/augmentation.js:
  (**
   * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
   *)

@ckeditor/ckeditor5-watchdog/src/index.js:
  (**
   * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
   *)

@ckeditor/ckeditor5-react/dist/index.js:
  (*!
   * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md.
   *)
*/
//# sourceMappingURL=@ckeditor_ckeditor5-react.js.map
